From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Sat, 30 Nov 2019 13:45:10 +0200
Subject: [PATCH] Port Velocity's faster varint decoder


diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
index 9951c1f9e9b8746fb4bf96fe0bbe4e9ab36a6478..ad6933ee3bc35d30a867a9ac5ff7fbd663bbb65e 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
@@ -133,10 +133,59 @@ public abstract class DefinedPacket
         return ret;
     }
 
+    // MikroCord start - port Velocity's faster varint decoder
+    private static class VarintByteDecoder implements io.netty.util.ByteProcessor {
+        private int accumulated;
+        private int read;
+        private boolean successfulDecode;
+
+        @Override
+        public boolean process(byte k) {
+            accumulated |= (k & 0x7F) << read++ * 7;
+            if (read > 5) {
+                return false;
+            }
+            if ((k & 0x80) != 128) {
+                successfulDecode = true;
+                return false;
+            }
+            return true;
+        }
+
+        void reset() {
+            accumulated = 0;
+            read = 0;
+            successfulDecode = false;
+        }
+    }
+    private static final io.netty.util.concurrent.FastThreadLocal<VarintByteDecoder> DECODER = new io.netty.util.concurrent.FastThreadLocal<>() {
+        @Override
+        protected VarintByteDecoder initialValue() throws Exception {
+            return new VarintByteDecoder();
+        }
+    };
+
+    private static final io.netty.handler.codec.CorruptedFrameException brokenVarintException = new io.netty.handler.codec.CorruptedFrameException("Incomplete VarInt or VarInt too big!");
+    public static int readVarInt(ByteBuf buf) {
+        var decoder = DECODER.get();
+        try {
+            int idx = buf.forEachByte(decoder);
+            if (decoder.successfulDecode && idx >= 0) {
+                buf.readerIndex(idx + 1);
+                return decoder.accumulated;
+            } else {
+                throw brokenVarintException;
+            }
+        } finally {
+            decoder.reset();
+        }
+    }
+    /*
     public static int readVarInt(ByteBuf input)
     {
         return readVarInt( input, 5 );
     }
+    */ // MikroCord end
 
     public static int readVarInt(ByteBuf input, int maxBytes)
     {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index 0f65348b4f30e26962a838258f2e2d474675fa49..0e19a79031cc8cef90b80f84d9c3be95cc90e530 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -95,6 +95,12 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
             */
             in.readerIndex(readIdx);
             out.add(new PacketWrapper(packet, in.retain()));
+        } catch (io.netty.handler.codec.CorruptedFrameException e) {
+            if (this.closeConnectionOnDecodeError) {
+                ctx.channel().close();
+                return;
+            }
+            throw e;
             // MikroCord end
         } catch (BadPacketException | IndexOutOfBoundsException e) {
             invalidPacketMetric.run(); // MikroCord - add Prometheus metrics support
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
index 4f16c8cb0b154bcae55a07f8850ebe1d56d188d7..72f7806544cefc88b1f10517f81fbb1a54ba265a 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
@@ -70,7 +70,7 @@ public class Varint21FrameDecoder extends ByteToMessageDecoder
         int packetLen;
         try {
             packetLen = DefinedPacket.readVarInt(in);
-        } catch (Exception e) {
+        } catch (CorruptedFrameException e) {
             if (this.closeConnectionOnDecodeError) {
                 ctx.channel().close();
                 return;
