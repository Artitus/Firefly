From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Sat, 30 May 2020 22:48:05 +0300
Subject: [PATCH] Port Velocity's faster varint decoder - take 2


diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
index 550f0d1e75203743ff30dbd99ce86b2e6dcb0c72..2732aba6cefaba273b95a4d53cb527b0c1be3bb2 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
@@ -20,6 +20,80 @@ public class Varint21FrameDecoder extends ByteToMessageDecoder
 
     @Override
     protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception
+    // Firefly start - Port Velocity's faster varint decoder
+    {
+        while (in.isReadable()) {
+            int varintEnd = in.forEachByte(reader);
+            if (varintEnd == -1) {
+                return;
+            }
+
+            if (!reader.successfulDecode) {
+                boolean tooBig = reader.read > 3;
+                reader.reset();
+                if (tooBig) {
+                    if (this.closeConnectionOnDecodeError) {
+                        eu.mikroskeem.firefly.DiscardHandler.addBeforeAndClose(ctx, "packet-decoder");
+                    } else {
+                        throw BAD_LENGTH_CACHED;
+                    }
+                }
+                return;
+            }
+
+            if (reader.accumulated < 0) {
+                if (this.closeConnectionOnDecodeError) {
+                    eu.mikroskeem.firefly.DiscardHandler.addBeforeAndClose(ctx, "packet-decoder");
+                } else {
+                    throw BAD_LENGTH_CACHED;
+                }
+                return;
+            }
+
+            if (reader.accumulated == 0 && !server) {
+                eu.mikroskeem.firefly.DiscardHandler.addBeforeAndClose(ctx, "packet-decoder");
+                return;
+            }
+
+            int minimumRead = reader.read + reader.accumulated;
+            if (in.isReadable(minimumRead)) {
+                out.add(in.retainedSlice(varintEnd + 1, reader.accumulated));
+                in.skipBytes(minimumRead);
+                reader.reset();
+            } else {
+                reader.reset();
+                return;
+            }
+        }
+    }
+    private static final net.md_5.bungee.protocol.FastDecoderException BAD_LENGTH_CACHED = new net.md_5.bungee.protocol.FastDecoderException("bad frame length");
+    private final VarintByteDecoder reader = new VarintByteDecoder();
+    private static class VarintByteDecoder implements io.netty.util.ByteProcessor {
+        private int accumulated;
+        private int read;
+        private boolean successfulDecode;
+
+        @Override
+        public boolean process(byte k) {
+            accumulated |= (k & 0x7F) << read++ * 7;
+            if (read > 3) {
+                return false;
+            }
+            if ((k & 0x80) != 128) {
+                successfulDecode = true;
+                return false;
+            }
+            return true;
+        }
+
+        void reset() {
+            accumulated = 0;
+            read = 0;
+            successfulDecode = false;
+        }
+    }
+    protected void old_decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception
+    // Firefly end
     {
         in.markReaderIndex();
 
