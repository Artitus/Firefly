From da48995009983399424ef52aecb98f8a0e19d4a7 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Wed, 29 May 2019 14:34:43 +0300
Subject: [PATCH] Implement Velocity modern forwarding support


diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index 2a6e8730..d1b206a6 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -263,4 +263,8 @@ public interface ProxyConfig
      */
     boolean isLogInvalidQueryPackets();
     // MikroCord end
+    // MikroCord start - Implement Velocity modern forwarding support
+    boolean isVelocityForwardingSupport();
+    byte[] getVelocityForwardingSecret();
+    // MikroCord end
 }
diff --git a/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java b/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java
index cee835b4..6ca62381 100644
--- a/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java
+++ b/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java
@@ -1,11 +1,13 @@
 package eu.mikroskeem.mikrocord.conf;
 
 import com.google.common.collect.ImmutableSet;
+import eu.mikroskeem.mikrocord.misc.VelocitySupport;
 import io.github.waterfallmc.waterfall.conf.WaterfallConfiguration;
 import lombok.Getter;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.config.ConfigurationAdapter;
 
+import java.nio.charset.StandardCharsets;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -26,6 +28,12 @@ public class MikroCordConfiguration extends WaterfallConfiguration {
     @Getter
     private boolean logInvalidQueryPackets = false;
 
+    @Getter
+    private boolean velocityForwardingSupport;
+
+    @Getter
+    private byte[] velocityForwardingSecret;
+
     @Override
     public void load() {
         super.load();
@@ -36,5 +44,7 @@ public class MikroCordConfiguration extends WaterfallConfiguration {
         restartScriptPath = config.getString("restart.script_path", restartScriptPath);
         ignoredLogCommands = new HashSet<>((List<String>) config.getList("log.ignored_commands", ignoredLogCommands));
         logInvalidQueryPackets = config.getBoolean("log.invalid_query_packets", logInvalidQueryPackets);
+        velocityForwardingSupport = config.getBoolean("velocity_modern_forwarding.enabled", false);
+        velocityForwardingSecret = config.getString("velocity_modern_forwarding.secret", () -> VelocitySupport.generateRandomString(12)).getBytes(StandardCharsets.UTF_8);
     }
 }
diff --git a/proxy/src/main/java/eu/mikroskeem/mikrocord/misc/VelocitySupport.java b/proxy/src/main/java/eu/mikroskeem/mikrocord/misc/VelocitySupport.java
new file mode 100644
index 00000000..6977ee70
--- /dev/null
+++ b/proxy/src/main/java/eu/mikroskeem/mikrocord/misc/VelocitySupport.java
@@ -0,0 +1,85 @@
+package eu.mikroskeem.mikrocord.misc;
+
+import io.github.waterfallmc.waterfall.utils.UUIDUtils;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import net.md_5.bungee.UserConnection;
+import net.md_5.bungee.connection.LoginResult;
+import net.md_5.bungee.protocol.DefinedPacket;
+
+import javax.crypto.Mac;
+import javax.crypto.SecretKey;
+import javax.crypto.spec.SecretKeySpec;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+
+/**
+ * @author Mark Vainomaa
+ */
+public final class VelocitySupport {
+    private final static String chars = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz1234567890";
+    private final static SecureRandom secureRandom = new SecureRandom();
+
+    private VelocitySupport() {}
+
+    public final static String MODERN_FORWARDING_CHANNEL_NAME = "velocity:player_info";
+    public final static int MODERN_FORWARDING_VERSION = 1;
+
+    // Borrowed from com.velocitypowered.proxy.connection.backend.LoginSessionHandler
+    public static ByteBuf createForwardingData(byte[] hmacSecret, UserConnection user) {
+        ByteBuf dataToForward = Unpooled.buffer();
+        ByteBuf finalData = Unpooled.buffer();
+        try {
+            DefinedPacket.writeVarInt(MODERN_FORWARDING_VERSION, dataToForward);
+            DefinedPacket.writeString(user.getAddress().getHostString(), dataToForward);
+            LoginResult profile = user.getPendingConnection().getLoginProfile();
+            if (profile == null) {
+                profile = new LoginResult(null, user.getName(), new LoginResult.Property[] {});
+            }
+            // Note: if profile is not present, then we're free to assume that player is in offline mode
+            DefinedPacket.writeUUID(profile.getId() != null ? UUIDUtils.fromString(profile.getId()) : user.getPendingConnection().getOfflineId(), dataToForward);
+            DefinedPacket.writeString(profile.getName() != null ? profile.getName() : user.getPendingConnection().getName(), dataToForward);
+            DefinedPacket.writeVarInt(profile.getProperties() != null ? profile.getProperties().length : 0, dataToForward);
+            if (profile.getProperties() != null) {
+                for (LoginResult.Property property : profile.getProperties()) {
+                    DefinedPacket.writeString(property.getName(), dataToForward);
+                    DefinedPacket.writeString(property.getValue(), dataToForward);
+                    String signature = property.getSignature();
+                    if (signature != null) {
+                        dataToForward.writeBoolean(true);
+                        DefinedPacket.writeString(signature, dataToForward);
+                    } else {
+                        dataToForward.writeBoolean(false);
+                    }
+                }
+            }
+
+            SecretKey key = new SecretKeySpec(hmacSecret, "HmacSHA256");
+            Mac mac = Mac.getInstance("HmacSHA256");
+            mac.init(key);
+            mac.update(dataToForward.array(), dataToForward.arrayOffset(), dataToForward.readableBytes());
+            byte[] sig = mac.doFinal();
+            finalData.writeBytes(sig);
+            finalData.writeBytes(dataToForward);
+            return finalData;
+        } catch (InvalidKeyException e) {
+            finalData.release();
+            throw new RuntimeException("Unable to authenticate data", e);
+        } catch (NoSuchAlgorithmException e) {
+            // Should never happen
+            finalData.release();
+            throw new AssertionError(e);
+        } finally {
+            dataToForward.release();
+        }
+    }
+
+    public static String generateRandomString(int length) {
+        StringBuilder builder = new StringBuilder();
+        for (int i = 0; i < length; i++) {
+            builder.append(chars.charAt(secureRandom.nextInt(chars.length())));
+        }
+        return builder.toString();
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index c5687e21..e29bad8a 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -65,6 +65,7 @@ public class ServerConnector extends PacketHandler implements eu.mikroskeem.mikr
     @Getter
     private ForgeServerHandler handshakeHandler;
     private boolean obsolete;
+    private boolean modernInformationForwarded = false; // MikroCord - Implement Velocity modern forwarding support
 
     private enum State
     {
@@ -167,6 +168,11 @@ public class ServerConnector extends PacketHandler implements eu.mikroskeem.mikr
         Preconditions.checkState( thisState == State.LOGIN_SUCCESS, "Not expecting LOGIN_SUCCESS" );
         ch.setProtocol( Protocol.GAME );
         thisState = State.LOGIN;
+        // MikroCord start - Implement Velocity modern forwarding support
+        if (bungee.getConfig().isVelocityForwardingSupport() && !modernInformationForwarded) {
+            throw new QuietException("Your server did not send a forwarding request to the proxy. Is it set up correctly?");
+        }
+        // MikroCord end
 
         // Only reset the Forge client when:
         // 1) The user is switching servers (so has a current server)
@@ -440,4 +446,35 @@ public class ServerConnector extends PacketHandler implements eu.mikroskeem.mikr
         return ch.getHandle();
     }
     // MikroCord end
-}
+    // MikroCord start - Implement Velocity modern forwarding support
+    @Override
+    public void handle(net.md_5.bungee.protocol.packet.LoginPayloadRequest request) {
+        net.md_5.bungee.protocol.packet.LoginPayloadResponse response = new net.md_5.bungee.protocol.packet.LoginPayloadResponse();
+        response.setId(request.getId());
+        if (bungee.getConfig().isVelocityForwardingSupport() && request.getChannel().equals(eu.mikroskeem.mikrocord.misc.VelocitySupport.MODERN_FORWARDING_CHANNEL_NAME)) {
+            ByteBuf forwardingData = null;
+            byte[] data;
+            try {
+                forwardingData = eu.mikroskeem.mikrocord.misc.VelocitySupport.createForwardingData(
+                        bungee.getConfig().getVelocityForwardingSecret(),
+                        user
+                );
+                data = new byte[forwardingData.readableBytes()];
+
+                // Turn bytebuf into byte array
+                forwardingData.readBytes(data);
+            } finally {
+                if (forwardingData != null)
+                    forwardingData.release();
+            }
+
+            response.setData(data);
+            modernInformationForwarded = true;
+        } else {
+            response.setData(null);
+        }
+
+        ch.write(response);
+    }
+    // MikroCord end
+}
\ No newline at end of file
-- 
2.21.0

