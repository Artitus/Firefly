From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Sat, 30 Nov 2019 13:45:19 +0200
Subject: [PATCH] Avoid creating unneeded packet buffer copy


diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index 05e7cdc28bd7bf62ee0db5b6c5dce3c0d737dc3d..5dd9865ad1c12d63ed0a86ad71fa34751241eb3d 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -36,6 +36,10 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
     private final boolean logPacketDumpOnDecodeError;
     private final boolean closeConnectionOnDecodeError;
     // Firefly end
+    // Firefly start - Avoid creating unneeded packet buffer copy
+    @Setter private static java.util.function.BooleanSupplier copyPacketBufferSupplier;
+    private final boolean copyPacketBuffer;
+    // Firefly end
 
     public MinecraftDecoder(Protocol protocol, boolean server, int protocolVersion) {
         this.protocol = protocol;
@@ -46,13 +50,21 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
         this.logPacketDumpOnDecodeError = logPacketDumpOnDecodeErrorSupplier.getAsBoolean();
         this.closeConnectionOnDecodeError = closeConnectionOnDecodeErrorSupplier.getAsBoolean();
         // Firefly end
+        // Firefly start - Avoid creating unneeded packet buffer copy
+        this.copyPacketBuffer = copyPacketBufferSupplier.getAsBoolean();
+        // Firefly end
     }
 
     @Override
     protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception
     {
         Protocol.DirectionData prot = ( server ) ? protocol.TO_SERVER : protocol.TO_CLIENT;
+        /* Firefly start - Avoid creating unneeded packet buffer copy
         ByteBuf slice = in.copy(); // Can't slice this one due to EntityMap :(
+        */
+        var slice = copyPacketBuffer ? in.copy() : in;
+        int readIdx = in.readerIndex();
+        // Firefly end
 
         Object packetTypeInfo = null;
         try
@@ -79,12 +91,20 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
                 }
                 decodedMetric.run(); // Firefly - add Prometheus metrics support
             } else
+                if (copyPacketBuffer) // Firefly - Avoid creating unneeded packet buffer copy
             {
                 in.skipBytes( in.readableBytes() );
             }
 
-            out.add( new PacketWrapper( packet, slice ) );
+            if (copyPacketBuffer) { // Firefly - Avoid creating unneeded packet buffer copy
+            out.add(new PacketWrapper(packet, slice));
             slice = null;
+            // Firefly start - Avoid creating unneeded packet buffer copy
+            } else {
+                in.readerIndex(readIdx);
+                out.add(new PacketWrapper(packet, in.retain()));
+                slice = null;
+            } // Firefly end
         } catch (BadPacketException | IndexOutOfBoundsException e) {
             invalidPacketMetric.run(); // Firefly - add Prometheus metrics support
             final String packetTypeStr;
@@ -102,7 +122,7 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
             /* // Firefly start - add option to disable noisy packet decode exception
             throw new FastDecoderException("Error decoding packet " + packetTypeStr + " with contents:\n" + ByteBufUtil.prettyHexDump(slice), e); // Waterfall
             */
-            FastDecoderException de = new FastDecoderException("Error decoding packet " + packetTypeStr + " with contents:\n" + ByteBufUtil.prettyHexDump(slice), e);
+            FastDecoderException de = new FastDecoderException("Error decoding packet " + packetTypeStr + " with contents:\n" + ByteBufUtil.prettyHexDump(/*slice*/in), e); // Firefly - Avoid creating unneeded packet buffer copy
             if (!this.noisyPacketDecodeException) {
                 de.setStackTrace(new StackTraceElement[0]);
                 de.getCause().setStackTrace(new StackTraceElement[0]);
diff --git a/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java b/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
index 416507bd8c667e8b48384e5e88eca429dc8461a8..f5ec75b2755255c65b8f08600e316e54211c9dbf 100644
--- a/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
+++ b/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
@@ -26,6 +26,7 @@ public class FireflyConfiguration extends WaterfallConfiguration {
         MinecraftDecoder.setNoisyPacketDecodeExceptionSupplier(this::isLogNoisyPacketDecodeException);
         MinecraftDecoder.setLogPacketDumpOnDecodeErrorSupplier(this::isLogPacketDecodeErrors);
         MinecraftDecoder.setCloseConnectionOnDecodeErrorSupplier(this::isDropConnectionsSendingInvalidPackets);
+        MinecraftDecoder.setCopyPacketBufferSupplier(() -> !isDisableEntityMetadataRewrite());
         Varint21FrameDecoder.setCloseConnectionOnDecodeErrorSupplier(this::isDropConnectionsSendingInvalidPackets);
     }
 
