From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Sat, 13 Apr 2019 22:08:57 +0300
Subject: [PATCH] Use ASM to invoke event handlers


diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
index 85203fb8ad0e95a179fbdf1a65440b456c56d1e1..141de9e68abc7b5d60a25c3819c4a4cf4985f623 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
@@ -5,7 +5,7 @@ import java.net.URLClassLoader;
 import java.util.Set;
 import java.util.concurrent.CopyOnWriteArraySet;
 
-public class PluginClassloader extends URLClassLoader
+public class PluginClassloader extends URLClassLoader implements eu.mikroskeem.mikrocord.event.DynamicClassLoader // MikroCord - implement DynamicClassLoader
 {
 
     private static final Set<PluginClassloader> allLoaders = new CopyOnWriteArraySet<>();
@@ -52,4 +52,11 @@ public class PluginClassloader extends URLClassLoader
         }
         throw new ClassNotFoundException( name );
     }
+
+    // MikroCord start - implement DynamicClassLoader
+    @Override
+    public Class<?> defineClass(String name, byte[] data) {
+        return this.defineClass(name, data, 0, data.length);
+    }
+    // MikroCord end
 }
diff --git a/event/pom.xml b/event/pom.xml
index 7af258a5db166d328c9dbbcd75aaab1ea7518fb9..95b13732c546d3377c3daa7c3c520dd59c883481 100644
--- a/event/pom.xml
+++ b/event/pom.xml
@@ -17,4 +17,13 @@
 
     <name>MikroCord-Event</name>
     <description>Generic java event dispatching API intended for use with MikroCord.</description>
+    <!-- MikroCord start - Add ASM -->
+    <dependencies>
+        <dependency>
+            <groupId>org.ow2.asm</groupId>
+            <artifactId>asm</artifactId>
+            <version>7.1</version>
+        </dependency>
+    </dependencies>
+    <!-- MikroCord end -->
 </project>
diff --git a/event/src/main/java/eu/mikroskeem/mikrocord/event/ASMEventExecutor.java b/event/src/main/java/eu/mikroskeem/mikrocord/event/ASMEventExecutor.java
new file mode 100644
index 0000000000000000000000000000000000000000..1d5661247ebd5f20e927a4340767312260428164
--- /dev/null
+++ b/event/src/main/java/eu/mikroskeem/mikrocord/event/ASMEventExecutor.java
@@ -0,0 +1,109 @@
+package eu.mikroskeem.mikrocord.event;
+
+import org.objectweb.asm.ClassWriter;
+import org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.Opcodes;
+import org.objectweb.asm.Type;
+
+import java.lang.reflect.Method;
+import java.util.WeakHashMap;
+import java.util.concurrent.atomic.AtomicInteger;
+
+/**
+ * @author Mark Vainomaa
+ */
+class ASMEventExecutor {
+    private final static AtomicInteger CLASS_NAME_COUNTER = new AtomicInteger(0);
+    private final static Method defineClassMethod;
+
+    private final static WeakHashMap<Method, EventExecutor> generatedExecutors = new WeakHashMap<>();
+
+    static EventExecutor getEventExecutor(Method handlerMethod) {
+        return generatedExecutors.computeIfAbsent(handlerMethod, (__) -> {
+            try {
+                // Generate and load newly created event executor
+                ClassLoader classLoader = handlerMethod.getDeclaringClass().getClassLoader();
+                String className = generateNewClassName();
+                byte[] generatedExc = generateEventExecutor(className, handlerMethod);
+                Class<? extends EventExecutor> eventExcClass = defineClass(classLoader, className, generatedExc).asSubclass(EventExecutor.class);
+
+                // Instantiate generated executor
+                return eventExcClass.getConstructor().newInstance();
+            } catch (Exception e) {
+                throw new RuntimeException("Failed to generate an event executor", e);
+            }
+        });
+    }
+
+    /**
+     * @return New ASM event executor class name
+     */
+    static String generateNewClassName() {
+        return ASMEventExecutor.class.getPackage().getName() + ".generated.GeneratedASMEventExecutor" + CLASS_NAME_COUNTER.getAndIncrement();
+    }
+
+    static byte[] generateEventExecutor(String className, Method handlerMethod) {
+        String rawName = className.replace('.', '/');
+
+        Class<?> listenerClass = handlerMethod.getDeclaringClass();
+        Class<?> eventClass = handlerMethod.getParameterTypes()[0];
+
+        String objectName = Type.getInternalName(Object.class);
+        String objectDesc = "L" + objectName + ";";
+        String eeName = Type.getInternalName(EventExecutor.class);
+        String eeDesc = "(" + objectDesc + objectDesc + ")V";
+
+        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
+        cw.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC, rawName, null, objectName, new String[]{ eeName });
+
+        // Generate no-args public constructor
+        {
+            MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null);
+            mv.visitVarInsn(Opcodes.ALOAD, 0);
+            mv.visitMethodInsn(Opcodes.INVOKESPECIAL, objectName, "<init>", "()V", false);
+            mv.visitInsn(Opcodes.RETURN);
+            mv.visitMaxs(0, 0);
+            mv.visitEnd();
+        }
+
+        // Generate event executor method
+        {
+            MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC, "execute", eeDesc, null, null);
+            mv.visitVarInsn(Opcodes.ALOAD, 1);
+            mv.visitTypeInsn(Opcodes.CHECKCAST, Type.getInternalName(listenerClass));
+            mv.visitVarInsn(Opcodes.ALOAD, 2);
+            mv.visitTypeInsn(Opcodes.CHECKCAST, Type.getInternalName(eventClass));
+            int inv = listenerClass.isInterface() ? Opcodes.INVOKEINTERFACE : Opcodes.INVOKEVIRTUAL;
+            mv.visitMethodInsn(inv, Type.getInternalName(listenerClass), handlerMethod.getName(), Type.getMethodDescriptor(handlerMethod), listenerClass.isInterface());
+            if(handlerMethod.getReturnType() != void.class) {
+                mv.visitInsn(Opcodes.POP);
+            }
+            mv.visitInsn(Opcodes.RETURN);
+            mv.visitMaxs(0, 0);
+            mv.visitEnd();
+        }
+
+        cw.visitEnd();
+        return cw.toByteArray();
+    }
+
+    private static Class<?> defineClass(ClassLoader loader, String name, byte[] data) {
+        if (loader instanceof DynamicClassLoader) {
+            return ((DynamicClassLoader) loader).defineClass(name, data);
+        }
+        try {
+            return (Class<?>) defineClassMethod.invoke(loader, name, data, 0, data.length);
+        } catch (Exception e) {
+            throw new RuntimeException("Failed to define class '" + name + "'", e);
+        }
+    }
+
+    static {
+        try {
+            defineClassMethod = ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class);
+            defineClassMethod.setAccessible(true);
+        } catch (Exception e) {
+            throw new Error("Failed to get ClassLoader#defineClass method", e);
+        }
+    }
+}
\ No newline at end of file
diff --git a/event/src/main/java/eu/mikroskeem/mikrocord/event/DynamicClassLoader.java b/event/src/main/java/eu/mikroskeem/mikrocord/event/DynamicClassLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..727ef5f7388e78ddadd02719c3ef91ec5b4b0bda
--- /dev/null
+++ b/event/src/main/java/eu/mikroskeem/mikrocord/event/DynamicClassLoader.java
@@ -0,0 +1,11 @@
+package eu.mikroskeem.mikrocord.event;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+
+/**
+ * @author Mark Vainomaa
+ */
+public interface DynamicClassLoader {
+    @NonNull
+    Class<?> defineClass(String name, byte[] data);
+}
diff --git a/event/src/main/java/eu/mikroskeem/mikrocord/event/EventExecutor.java b/event/src/main/java/eu/mikroskeem/mikrocord/event/EventExecutor.java
new file mode 100644
index 0000000000000000000000000000000000000000..ad7bcbf698f24c45d3f3eec10a2289c80b9585c6
--- /dev/null
+++ b/event/src/main/java/eu/mikroskeem/mikrocord/event/EventExecutor.java
@@ -0,0 +1,20 @@
+package eu.mikroskeem.mikrocord.event;
+
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+
+/**
+ * @author Mark Vainomaa
+ */
+public interface EventExecutor {
+    void execute(Object listener, Object event);
+
+    static EventExecutor create(Method method) {
+        if(Modifier.isPublic(method.getModifiers())) {
+            return ASMEventExecutor.getEventExecutor(method);
+        } else {
+            method.setAccessible(true);
+            return new MethodHandleEventExecutor(method);
+        }
+    }
+}
diff --git a/event/src/main/java/eu/mikroskeem/mikrocord/event/MethodHandleEventExecutor.java b/event/src/main/java/eu/mikroskeem/mikrocord/event/MethodHandleEventExecutor.java
new file mode 100644
index 0000000000000000000000000000000000000000..72d8fd43bd879d00b158cbd8efb3c3ca34f4f9fd
--- /dev/null
+++ b/event/src/main/java/eu/mikroskeem/mikrocord/event/MethodHandleEventExecutor.java
@@ -0,0 +1,44 @@
+package eu.mikroskeem.mikrocord.event;
+
+import lombok.SneakyThrows;
+
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+
+/**
+ * @author Mark Vainomaa
+ */
+class MethodHandleEventExecutor implements EventExecutor {
+    private final Class<?> eventClass;
+    private final MethodHandle handle;
+    private final boolean isStatic;
+
+    @SneakyThrows
+    MethodHandleEventExecutor(Method method) {
+        this.eventClass = method.getParameterTypes()[0];
+        this.handle = MethodHandles.lookup().unreflect(method);
+        this.isStatic = Modifier.isStatic(method.getModifiers());
+    }
+
+    @Override
+    @SneakyThrows
+    public void execute(Object listener, Object event) {
+        if(!eventClass.isInstance(event))
+            return; // Uhh?
+
+        if(isStatic) {
+            executeStatic(listener, event);
+        } else {
+            this.handle.invoke(listener, event);
+        }
+    }
+
+    // This exists only to show up in stack trace what way was used to
+    // execute the event handler
+    @SneakyThrows
+    public void executeStatic(Object listener, Object event) {
+        this.handle.invoke(event);
+    }
+}
diff --git a/event/src/main/java/net/md_5/bungee/event/EventBus.java b/event/src/main/java/net/md_5/bungee/event/EventBus.java
index 5b5d42010b6daa999714eaa9dff54eb0838c7b15..e8db3b1e03e1d9e0644b5109f23e7994ade45a97 100644
--- a/event/src/main/java/net/md_5/bungee/event/EventBus.java
+++ b/event/src/main/java/net/md_5/bungee/event/EventBus.java
@@ -50,9 +50,9 @@ public class EventBus
                 } catch ( IllegalArgumentException ex )
                 {
                     throw new Error( "Method rejected target/argument: " + event, ex );
-                } catch ( InvocationTargetException ex )
+                } catch ( Exception ex ) // MikroCord - Use ASM to invoke event handlers
                 {
-                    logger.log( Level.WARNING, MessageFormat.format( "Error dispatching event {0} to listener {1}", event, method.getListener() ), ex.getCause() );
+                    logger.log( Level.WARNING, MessageFormat.format( "Error dispatching event {0} to listener {1}", event, method.getListener() ), ex ); // MikroCord - Use ASM to invoke event handlers
                 }
             }
         }
@@ -115,8 +115,12 @@ public class EventBus
                         currentPriorityMap = new HashMap<>();
                         prioritiesMap.put( entry.getKey(), currentPriorityMap );
                     }
+                    // MikroCord start - 0 is faster
+                    /*
                     Method[] baked = new Method[ entry.getValue().size() ];
-                    currentPriorityMap.put( listener, entry.getValue().toArray( baked ) );
+                    */
+                    currentPriorityMap.put( listener, entry.getValue().toArray( new Method[0] ) );
+                    // MikroCord end
                 }
                 bakeHandlers( e.getKey() );
             }
@@ -186,13 +190,13 @@ public class EventBus
                     {
                         for ( Method method : listenerHandlers.getValue() )
                         {
-                            EventHandlerMethod ehm = new EventHandlerMethod( listenerHandlers.getKey(), method );
+                            EventHandlerMethod ehm = new EventHandlerMethod( listenerHandlers.getKey(), method, eu.mikroskeem.mikrocord.event.EventExecutor.create(method) ); // MikroCord - Use ASM to invoke event handlers
                             handlersList.add( ehm );
                         }
                     }
                 }
             } while ( value++ < Byte.MAX_VALUE );
-            byEventBaked.put( eventClass, handlersList.toArray( new EventHandlerMethod[ handlersList.size() ] ) );
+            byEventBaked.put( eventClass, handlersList.toArray( new EventHandlerMethod[ 0 ] ) ); // MikroCord - 0 is faster
         } else
         {
             byEventBaked.remove( eventClass );
diff --git a/event/src/main/java/net/md_5/bungee/event/EventHandlerMethod.java b/event/src/main/java/net/md_5/bungee/event/EventHandlerMethod.java
index ad19c020c77a45c3b3a8a18aaf2f59c2de15ec7c..3d98102d236c09a79d86e1b67767befcec0ae165 100644
--- a/event/src/main/java/net/md_5/bungee/event/EventHandlerMethod.java
+++ b/event/src/main/java/net/md_5/bungee/event/EventHandlerMethod.java
@@ -13,9 +13,10 @@ public class EventHandlerMethod
     private final Object listener;
     @Getter
     private final Method method;
+    private final eu.mikroskeem.mikrocord.event.EventExecutor executor; // MikroCord - Use ASM to invoke event handlers
 
     public void invoke(Object event) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException
     {
-        method.invoke( listener, event );
+        executor.execute( listener, event ); // MikroCord - Use ASM to invoke event handlers
     }
 }
