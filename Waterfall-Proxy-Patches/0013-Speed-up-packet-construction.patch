From 62e8954cba0e7ad67337537de06a3ee3cb1bed9e Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Sat, 13 Apr 2019 20:30:37 +0300
Subject: [PATCH] Speed up packet construction


diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index be20fc59..f1aa225a 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -54,15 +54,18 @@ public enum Protocol
             // Waterdog start
             TO_SERVER.registerPacket(
                     network.ycc.waterdog.pe.packet.PEHandshake.class,
+                    network.ycc.waterdog.pe.packet.PEHandshake::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_PE_1_8, 0x01 )
             );
             TO_CLIENT.registerPacket(
                     KeepAlive.class,
+                    KeepAlive::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_PE_1_8, 0x00 )
             );
             // Waterdog end
             TO_SERVER.registerPacket(
                     Handshake.class,
+                    Handshake::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
             );
         }
@@ -112,6 +115,7 @@ public enum Protocol
             // Waterdog end
             TO_CLIENT.registerPacket(
                     KeepAlive.class,
+                    KeepAlive::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_PE_1_8, 0x00 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x00 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x1F ),
@@ -120,12 +124,14 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     Login.class,
+                    Login::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x01 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x23 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x25 )
             );
             TO_CLIENT.registerPacket(
                     Chat.class,
+                    Chat::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_PE_1_8, 0x09 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x02 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0F ),
@@ -133,6 +139,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     Respawn.class,
+                    Respawn::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_PE_1_8, 0x3D ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x07 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x33 ),
@@ -143,12 +150,14 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     BossBar.class,
+                    BossBar::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_PE_1_8, 0x4A ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0C )
             );
             // Waterfall start
             TO_CLIENT.registerPacket(
                     EntityEffect.class,
+                    EntityEffect::new, // MikroCord - speed up packet construction
                     map(ProtocolConstants.MINECRAFT_1_8, 0x1D),
                     map(ProtocolConstants.MINECRAFT_1_9, 0x4C),
                     map(ProtocolConstants.MINECRAFT_1_9_4, 0x4B),
@@ -159,6 +168,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     EntityRemoveEffect.class,
+                    EntityRemoveEffect::new, // MikroCord - speed up packet construction
                     map(ProtocolConstants.MINECRAFT_1_8, 0x1E),
                     map(ProtocolConstants.MINECRAFT_1_9, 0x31),
                     map(ProtocolConstants.MINECRAFT_1_12, 0x32),
@@ -169,6 +179,7 @@ public enum Protocol
             // Waterfall end
             TO_CLIENT.registerPacket(
                     PlayerListItem.class, // PlayerInfo
+                    PlayerListItem::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x38 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x2D ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x2E ),
@@ -177,12 +188,14 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     TabCompleteResponse.class,
+                    TabCompleteResponse::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x3A ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0E ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x10 )
             );
             TO_CLIENT.registerPacket(
                     ScoreboardObjective.class,
+                    ScoreboardObjective::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x3B ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x3F ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x41 ),
@@ -192,6 +205,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     ScoreboardScore.class,
+                    ScoreboardScore::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x3C ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x42 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x44 ),
@@ -201,6 +215,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     ScoreboardDisplay.class,
+                    ScoreboardDisplay::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x3D ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x38 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x3A ),
@@ -210,6 +225,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     Team.class,
+                    Team::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x3E ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x41 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x43 ),
@@ -219,6 +235,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     PluginMessage.class,
+                    PluginMessage::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_PE_1_8, 0x75 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x3F ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x18 ),
@@ -227,6 +244,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     Kick.class,
+                    Kick::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_PE_1_8, 0x05 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x40 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x1A ),
@@ -235,6 +253,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     Title.class,
+                    Title::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x45 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x47 ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x48 ),
@@ -243,6 +262,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     PlayerListHeaderFooter.class,
+                    PlayerListHeaderFooter::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x47 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x48 ),
                     map( ProtocolConstants.MINECRAFT_1_9_4, 0x47 ),
@@ -253,6 +273,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     EntityStatus.class,
+                    EntityStatus::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x1A ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x1B ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x1C ),
@@ -260,6 +281,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     Commands.class,
+                    Commands::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_13, 0x11 )
             );
             TO_CLIENT.registerPacket(
@@ -269,6 +291,7 @@ public enum Protocol
 
             TO_SERVER.registerPacket(
                     KeepAlive.class,
+                    KeepAlive::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_PE_1_8, 0x00 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x00 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0B ),
@@ -279,6 +302,7 @@ public enum Protocol
             );
             TO_SERVER.registerPacket(
                     Chat.class,
+                    Chat::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_PE_1_8, 0x09 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x01 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x02 ),
@@ -288,6 +312,7 @@ public enum Protocol
             );
             TO_SERVER.registerPacket(
                     TabCompleteRequest.class,
+                    TabCompleteRequest::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x14 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x01 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x02 ),
@@ -297,6 +322,7 @@ public enum Protocol
             );
             TO_SERVER.registerPacket(
                     ClientSettings.class,
+                    ClientSettings::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_PE_1_8, 0x45 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x15 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x04 ),
@@ -306,6 +332,7 @@ public enum Protocol
             );
             TO_SERVER.registerPacket(
                     PluginMessage.class,
+                    PluginMessage::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_PE_1_8, 0x75 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x17 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x09 ),
@@ -323,19 +350,23 @@ public enum Protocol
         {
             TO_CLIENT.registerPacket(
                     StatusResponse.class,
+                    StatusResponse::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
             );
             TO_CLIENT.registerPacket(
                     PingPacket.class,
+                    PingPacket::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
             );
 
             TO_SERVER.registerPacket(
                     StatusRequest.class,
+                    StatusRequest::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
             );
             TO_SERVER.registerPacket(
                     PingPacket.class,
+                    PingPacket::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
             );
         }
@@ -357,37 +388,45 @@ public enum Protocol
             // Waterdog end
             TO_CLIENT.registerPacket(
                     Kick.class,
+                    Kick::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_PE_1_8, 0x05 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
             );
             TO_CLIENT.registerPacket(
                     EncryptionRequest.class,
+                    EncryptionRequest::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
             );
             TO_CLIENT.registerPacket(
                     LoginSuccess.class,
+                    LoginSuccess::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_PE_1_8, 0x02 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x02 )
             );
             TO_CLIENT.registerPacket(
                     SetCompression.class,
+                    SetCompression::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x03 )
             );
             TO_CLIENT.registerPacket(
                     LoginPayloadRequest.class,
+                    LoginPayloadRequest::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_13, 0x04 )
             );
 
             TO_SERVER.registerPacket(
                     LoginRequest.class,
+                    LoginRequest::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
             );
             TO_SERVER.registerPacket(
                     EncryptionResponse.class,
+                    EncryptionResponse::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
             );
             TO_SERVER.registerPacket(
                     LoginPayloadResponse.class,
+                    LoginPayloadResponse::new, // MikroCord - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_13, 0x02 )
             );
         }
@@ -438,7 +477,7 @@ public enum Protocol
 
         private final int protocolVersion;
         private final TObjectIntMap<Class<? extends DefinedPacket>> packetMap = new TObjectIntHashMap<>( MAX_PACKET_ID );
-        private final Constructor<? extends DefinedPacket>[] packetConstructors = new Constructor[ MAX_PACKET_ID ];
+        private final java.util.function.Supplier<? extends DefinedPacket>[] packetConstructors = new java.util.function.Supplier[ MAX_PACKET_ID ]; // MikroCord - speed up packet construction
     }
 
     @Data
@@ -515,21 +554,21 @@ public enum Protocol
                 throw new BadPacketException( "Packet with id " + id + " outside of range " );
             }
 
-            Constructor<? extends DefinedPacket> constructor = protocolData.packetConstructors[id];
+            java.util.function.Supplier<? extends DefinedPacket> constructor = protocolData.packetConstructors[id]; // MikroCord - speed up packet construction
             try
             {
-                return ( constructor == null ) ? null : constructor.newInstance();
-            } catch ( ReflectiveOperationException ex )
+                return ( constructor == null ) ? null : constructor.get(); // MikroCord - speed up packet construction
+            } catch ( Exception ex ) // MikroCord - speed up packet construction
             {
                 throw new BadPacketException( "Could not construct packet with id " + id, ex );
             }
         }
 
-        public void registerPacket(Class<? extends DefinedPacket> packetClass, ProtocolMapping... mappings) // MikroCord - make packet manipulation easier
+        public <P extends DefinedPacket> void registerPacket(Class<P> packetClass, java.util.function.Supplier<P> constructor, ProtocolMapping... mappings) // MikroCord - speed up packet construction
         {
             try
             {
-                Constructor<? extends DefinedPacket> constructor = packetClass.getDeclaredConstructor();
+                //Constructor<? extends DefinedPacket> constructor = packetClass.getDeclaredConstructor(); // MikroCord - speed up packet construction
 
                 int mappingIndex = 0;
                 ProtocolMapping mapping = mappings[mappingIndex];
@@ -565,11 +604,29 @@ public enum Protocol
                     data.packetMap.put( packetClass, mapping.packetID );
                     data.packetConstructors[mapping.packetID] = constructor;
                 }
-            } catch ( NoSuchMethodException ex )
+            } catch ( Exception ex ) // MikroCord - speed up packet construction
             {
                 throw new BadPacketException( "No NoArgsConstructor for packet class " + packetClass );
             }
         }
+        // MikroCord start - speed up packet construction (backwards compat)
+        public <P extends DefinedPacket> void registerPacket(Class<P> packetClass, ProtocolMapping... mappings) {
+            java.util.function.Supplier<P> packetSupplier;
+            try {
+                Constructor<? extends DefinedPacket> constructor = packetClass.getDeclaredConstructor();
+                packetSupplier = () -> {
+                    try {
+                        return (P) constructor.newInstance();
+                    } catch (Exception e) {
+                        throw new RuntimeException(e);
+                    }
+                };
+            } catch (ReflectiveOperationException e) {
+                throw new BadPacketException( "No NoArgsConstructor for packet class " + packetClass );
+            }
+            registerPacket(packetClass, packetSupplier, mappings);
+        }
+        // MikroCord end
 
         public final int getId(Class<? extends DefinedPacket> packet, int version) // MikroCord - make packet manipulation easier
         {
-- 
2.21.0

