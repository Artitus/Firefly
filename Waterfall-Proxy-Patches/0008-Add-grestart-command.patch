From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Tue, 19 Mar 2019 23:17:23 +0200
Subject: [PATCH] Add /grestart command


diff --git a/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java b/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
index 3def5ca2ae147d395bef5750727df7a8a72e91de..3507e4b235fef56dc1ce7c23a9412b723558f54e 100644
--- a/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
+++ b/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
@@ -1,7 +1,20 @@
 package eu.mikroskeem.firefly.api.config;
 
+import org.checkerframework.checker.nullness.qual.NonNull;
+
 /**
  * @author Mark Vainomaa
  */
 public interface FireflyProxyConfig {
+    /**
+     * @return Player disconnect message on restart attempt
+     */
+    @NonNull
+    String getRestartMessage();
+
+    /**
+     * @return Script to be run on restart attempt
+     */
+    @NonNull
+    String getRestartScriptPath();
 }
diff --git a/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/WaterfallLogger.java b/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/WaterfallLogger.java
index e046897a13fe9ab64ecd3589f73f3f7403b06d91..14fcdb11d94b3adc2f49db7429194b7af2619982 100644
--- a/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/WaterfallLogger.java
+++ b/log4j/src/main/java/io/github/waterfallmc/waterfall/log4j/WaterfallLogger.java
@@ -7,12 +7,24 @@ import java.util.logging.Handler;
 import java.util.logging.Logger;
 
 public final class WaterfallLogger {
+    // Firefly start - restore old stdout/stderr on exit
+    private static java.io.PrintStream oldOut;
+    private static java.io.PrintStream oldErr;
+    public static void restoreOldOutputStreams() {
+        System.setOut(oldOut);
+        System.setErr(oldErr);
+    }
+    // Firefly end
 
     private WaterfallLogger() {
     }
 
     public static Logger create() {
         org.apache.logging.log4j.Logger redirect = LogManager.getRootLogger();
+        // Firefly start - restore old stdout/stderr on exit
+        oldOut = System.out;
+        oldErr = System.err;
+        // Firefly end
         System.setOut(IoBuilder.forLogger(redirect).setLevel(Level.INFO).buildPrintStream());
         System.setErr(IoBuilder.forLogger(redirect).setLevel(Level.ERROR).buildPrintStream());
 
diff --git a/proxy/src/main/java/eu/mikroskeem/firefly/command/CommandRestart.java b/proxy/src/main/java/eu/mikroskeem/firefly/command/CommandRestart.java
new file mode 100644
index 0000000000000000000000000000000000000000..7e5be7e2c291efec816f644bf13bbb188d8af06d
--- /dev/null
+++ b/proxy/src/main/java/eu/mikroskeem/firefly/command/CommandRestart.java
@@ -0,0 +1,51 @@
+package eu.mikroskeem.firefly.command;
+
+import com.google.common.base.Joiner;
+import io.netty.util.internal.PlatformDependent;
+import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.plugin.Command;
+
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+
+/**
+ * Proxy restart command
+ *
+ * @author Mark Vainomaa
+ */
+public final class CommandRestart extends Command {
+    public CommandRestart() {
+        super("grestart", "firefly.command.restart");
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args) {
+        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
+            Path scriptPath = Paths.get(BungeeCord.getInstance().getConfig().getRestartScriptPath()).toAbsolutePath();
+            if(Files.exists(scriptPath)) {
+                System.out.println("Attempting to restart with " + scriptPath);
+            } else {
+                System.out.println("Startup script '" + scriptPath + "' does not exist! Stopping proxy.");
+                return;
+            }
+
+            try {
+                if (PlatformDependent.isWindows()) {
+                    Runtime.getRuntime().exec("cmd /c start " + scriptPath);
+                } else {
+                    Runtime.getRuntime().exec("sh " + scriptPath);
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }, "Restart thread"));
+
+        if ( args.length == 0 ) {
+            BungeeCord.getInstance().stop(BungeeCord.getInstance().getConfig().getRestartMessage());
+        } else {
+            BungeeCord.getInstance().stop(Joiner.on( ' ' ).join(args));
+        }
+    }
+}
diff --git a/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java b/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
index 7f3947e5c955c4bf49a973304b09c66651f32711..1692f8efe71f8e3ac6ae154af46a6d5f8a36f9cc 100644
--- a/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
+++ b/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
@@ -1,6 +1,7 @@
 package eu.mikroskeem.firefly.conf;
 
 import io.github.waterfallmc.waterfall.conf.WaterfallConfiguration;
+import lombok.Getter;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.config.ConfigurationAdapter;
 
@@ -8,10 +9,19 @@ import net.md_5.bungee.api.config.ConfigurationAdapter;
  * @author Mark Vainomaa
  */
 public class FireflyConfiguration extends WaterfallConfiguration {
+    @Getter
+    private String restartMessage = "Proxy is restarting";
+
+    @Getter
+    private String restartScriptPath = "./restart.sh";
+
     @Override
     public void load() {
         super.load();
         ConfigurationAdapter config = ProxyServer.getInstance().getConfigurationAdapter(ProxyServer.ConfigurationType.FIREFLY);
         config.load();
+
+        restartMessage = config.getString("restart.message", restartMessage);
+        restartScriptPath = config.getString("restart.script_path", restartScriptPath);
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 28475898b9d593fe162f911bd1a49f82dd17fec0..5ae55ab88478defbeb2e350af569594100bd8e05 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -276,6 +276,9 @@ public class BungeeCord extends ProxyServer
         getPluginManager().registerCommand( null, new CommandIP() );
         getPluginManager().registerCommand( null, new CommandBungee() );
         getPluginManager().registerCommand( null, new CommandPerms() );
+        // Firefly start - Fork specific commands
+        getPluginManager().registerCommand(null, new eu.mikroskeem.firefly.command.CommandRestart());
+        // Firefly end
 
         if ( !Boolean.getBoolean( "net.md_5.bungee.native.disable" ) )
         {
@@ -556,6 +559,7 @@ public class BungeeCord extends ProxyServer
 
         if ( callSystemExit )
         {
+            io.github.waterfallmc.waterfall.log4j.WaterfallLogger.restoreOldOutputStreams(); // Firefly - restore old stdout/stderr on exit
             System.exit( 0 );
         }
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
index e3e6746b5c746c33054110fb98dcaaf98a8c3ea8..95a8ee5138125613a2b31353963e0be29892693a 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
@@ -106,7 +106,7 @@ public class YamlConfig implements ConfigurationAdapter
             } ) );
             set( "permissions.admin", Arrays.asList( new String[]
             {
-                "bungeecord.command.alert", "bungeecord.command.end", "bungeecord.command.ip", "bungeecord.command.reload"
+                "bungeecord.command.alert", "bungeecord.command.end", "bungeecord.command.ip", "bungeecord.command.reload", "firefly.command.restart" // Firefly - /grestart command
             } ) );
         }
 
