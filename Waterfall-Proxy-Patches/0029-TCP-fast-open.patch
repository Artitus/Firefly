From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Wed, 29 May 2019 20:02:24 +0300
Subject: [PATCH] TCP fast open


diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index 995010f633e5d634d18eca625eee8ba736239e22..729836a5ee854578c89aacbca3cba94c27a20467 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -260,4 +260,8 @@ public interface ProxyConfig
     boolean isVelocityForwardingSupport();
     byte[] getVelocityForwardingSecret();
     // MikroCord end
+    // MikroCord start - TCP fast open
+    boolean isTcpFastOpenEnabled();
+    int getTcpFastOpenMode();
+    // MikroCord end
 }
diff --git a/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java b/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java
index 5b0b1c5e730bb857616cb39598f96ee0904582aa..49cc56f32f1c12d98338847165debc3565d122f7 100644
--- a/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java
+++ b/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java
@@ -1,6 +1,7 @@
 package eu.mikroskeem.mikrocord.conf;
 
 import com.google.common.collect.ImmutableList;
+import eu.mikroskeem.mikrocord.misc.TCPFastOpenMode;
 import eu.mikroskeem.mikrocord.misc.VelocitySupport;
 import io.github.waterfallmc.waterfall.conf.WaterfallConfiguration;
 import lombok.Getter;
@@ -10,6 +11,7 @@ import net.md_5.bungee.api.config.ConfigurationAdapter;
 import java.nio.charset.StandardCharsets;
 import java.util.HashSet;
 import java.util.Set;
+import java.util.logging.Level;
 
 /**
  * @author Mark Vainomaa
@@ -33,6 +35,12 @@ public class MikroCordConfiguration extends WaterfallConfiguration {
     @Getter
     private byte[] velocityForwardingSecret;
 
+    @Getter
+    private boolean tcpFastOpenEnabled = true;
+
+    @Getter
+    private int tcpFastOpenMode = TCPFastOpenMode.CLIENT_ONLY.value;
+
     @Override
     public void load() {
         super.load();
@@ -45,5 +53,13 @@ public class MikroCordConfiguration extends WaterfallConfiguration {
         logInvalidQueryPackets = config.getBoolean("log.invalid_query_packets", logInvalidQueryPackets);
         velocityForwardingSupport = config.getBoolean("velocity_modern_forwarding.enabled", velocityForwardingSupport);
         velocityForwardingSecret = config.getString("velocity_modern_forwarding.secret", () -> VelocitySupport.generateRandomString(12)).getBytes(StandardCharsets.UTF_8);
+        tcpFastOpenEnabled = config.getBoolean("networking.tcp_fast_open.enabled", tcpFastOpenEnabled);
+        tcpFastOpenMode = setupTfo(config.getInt("networking.tcp_fast_open.mode", tcpFastOpenMode));
+    }
+
+    private int setupTfo(int value) {
+        TCPFastOpenMode actual = TCPFastOpenMode.fromValue(value);
+        ProxyServer.getInstance().getLogger().log(Level.INFO, "TCP fast open mode is set to {0}", actual.name());
+        return actual.value;
     }
 }
diff --git a/proxy/src/main/java/eu/mikroskeem/mikrocord/misc/TCPFastOpenMode.java b/proxy/src/main/java/eu/mikroskeem/mikrocord/misc/TCPFastOpenMode.java
new file mode 100644
index 0000000000000000000000000000000000000000..b52478f5b1a2999e7a1eec95c5553b4c15518cce
--- /dev/null
+++ b/proxy/src/main/java/eu/mikroskeem/mikrocord/misc/TCPFastOpenMode.java
@@ -0,0 +1,29 @@
+package eu.mikroskeem.mikrocord.misc;
+
+/**
+ * See https://en.wikipedia.org/wiki/TCP_Fast_Open
+ *
+ * @author Mark Vainomaa
+ */
+public enum TCPFastOpenMode {
+    DISABLED(0),
+    CLIENT_ONLY(1),
+    SERVER_ONLY(2),
+    BOTH(3),
+    ;
+
+    public final int value;
+
+    TCPFastOpenMode(int value) {
+        this.value = value;
+    }
+
+    public static TCPFastOpenMode fromValue(int value) {
+        for(TCPFastOpenMode enumValue : TCPFastOpenMode.values()) {
+            if (enumValue.value == value)
+                return enumValue;
+        }
+
+        return DISABLED;
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 23241d6816a5736da66e3d186130187b8a11b3dd..44226e67f822722fb6aed7e2b1a2525054e2af9e 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -60,6 +60,11 @@ public class PipelineUtils
             ListenerInfo listener = ch.attr( LISTENER ).get();
 
             BASE.initChannel( ch );
+            // MikroCord start - TCP fast open
+            if (epoll && BungeeCord.getInstance().getConfig().isTcpFastOpenEnabled()) {
+                ch.config().setOption(io.netty.channel.epoll.EpollChannelOption.TCP_FASTOPEN, BungeeCord.getInstance().getConfig().getTcpFastOpenMode());
+            }
+            // MikroCord end
             ch.pipeline().addBefore( FRAME_DECODER, LEGACY_DECODER, new LegacyDecoder() );
             ch.pipeline().addAfter( FRAME_DECODER, PACKET_DECODER, new MinecraftDecoder( Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion() ) );
             ch.pipeline().addAfter( FRAME_PREPENDER, PACKET_ENCODER, new MinecraftEncoder( Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion() ) );
