From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Sat, 30 May 2020 22:48:05 +0300
Subject: [PATCH] Port Velocity's faster varint decoder - take 3


diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
index 0ce0f1b30faebafa4875bc7e8e63844dbc056fe0..7a0a8530c415f5d6985a891b92e259fc47499919 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
@@ -20,6 +20,95 @@ public class Varint21FrameDecoder extends ByteToMessageDecoder
 
     @Override
     protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception
+    // Firefly start - Port Velocity's faster varint decoder
+    {
+        if (!ctx.channel().isActive()) {
+            in.skipBytes(in.readableBytes());
+            return;
+        }
+
+        while (in.isReadable()) {
+            reader.reset();
+
+            int varintEnd = in.forEachByte(reader);
+            if (varintEnd == -1) {
+                // We tried to go beyond the end of the buffer. This is probably a good sign that the
+                // buffer was too short to hold a proper varint.
+                return;
+            }
+
+            if (reader.result == DecodeResult.SUCCESS) {
+                if (reader.readVarint < 0) {
+                    if (this.closeConnectionOnDecodeError) {
+                        ctx.channel().close();
+                        return;
+                    } else {
+                        throw BAD_LENGTH_CACHED;
+                    }
+                } else if (reader.readVarint == 0) {
+                    // skip over the empty packet and ignore it
+                    in.readerIndex(varintEnd + 1);
+                } else {
+                    int minimumRead = reader.bytesRead + reader.readVarint;
+                    if (in.isReadable(minimumRead)) {
+                        out.add(in.retainedSlice(varintEnd + 1, reader.readVarint));
+                        in.skipBytes(minimumRead);
+                    } else {
+                        return;
+                    }
+                }
+            } else if (reader.result == DecodeResult.TOO_BIG) {
+                if (this.closeConnectionOnDecodeError) {
+                    ctx.channel().close();
+                    return;
+                } else {
+                    throw VARINT_BIG_CACHED;
+                }
+            } else if (reader.result == DecodeResult.TOO_SHORT) {
+                if (!server) {
+                    ctx.channel().close();
+                    return;
+                }
+                // No-op: we couldn't get a useful result.
+                break;
+            }
+        }
+    }
+    private static final net.md_5.bungee.protocol.FastDecoderException BAD_LENGTH_CACHED = new net.md_5.bungee.protocol.FastDecoderException("bad packet length");
+    private static final net.md_5.bungee.protocol.FastDecoderException VARINT_BIG_CACHED = new net.md_5.bungee.protocol.FastDecoderException("varint too big");
+    private final VarintByteDecoder reader = new VarintByteDecoder();
+    private static class VarintByteDecoder implements io.netty.util.ByteProcessor {
+        private int readVarint;
+        private int bytesRead;
+        private DecodeResult result = DecodeResult.TOO_SHORT;
+
+        @Override
+        public boolean process(byte k) {
+            readVarint |= (k & 0x7F) << bytesRead++ * 7;
+            if (bytesRead > 3) {
+                result = DecodeResult.TOO_BIG;
+                return false;
+            }
+            if ((k & 0x80) != 128) {
+                result = DecodeResult.SUCCESS;
+                return false;
+            }
+            return true;
+        }
+
+        void reset() {
+            readVarint = 0;
+            bytesRead = 0;
+            result = DecodeResult.TOO_SHORT;
+        }
+    }
+    private enum DecodeResult {
+        SUCCESS,
+        TOO_SHORT,
+        TOO_BIG
+    }
+    protected void old_decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception
+    // Firefly end
     {
         // Firefly start - Discard received data after closing the channel
         if (!ctx.channel().isActive()) {
