From f0f655e97beb18558f64228ae1faad16136a65b6 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Sun, 14 Apr 2019 21:48:01 +0300
Subject: [PATCH] Implement KyoriPowered/text support


diff --git a/api/src/main/java/net/md_5/bungee/api/CommandSender.java b/api/src/main/java/net/md_5/bungee/api/CommandSender.java
index a35b3fd0..675f306b 100644
--- a/api/src/main/java/net/md_5/bungee/api/CommandSender.java
+++ b/api/src/main/java/net/md_5/bungee/api/CommandSender.java
@@ -45,6 +45,29 @@ public interface CommandSender
      */
     public void sendMessage(BaseComponent message);
 
+    // MikroCord start - add KyoriPowered/text support
+    /**
+     * Send a message to this sender.
+     *
+     * @param message the message to send
+     */
+    default void sendMessage(net.kyori.text.Component message) {
+        sendMessage(new eu.mikroskeem.mikrocord.api.chat.AdapterComponent(message));
+    }
+
+    /**
+     * Send a message to this sender.
+     *
+     * @param message the message to send
+     */
+    default void sendMessage(net.kyori.text.Component... message) {
+        BaseComponent[] wrapped = java.util.stream.Stream.of(message)
+                .map(eu.mikroskeem.mikrocord.api.chat.AdapterComponent::new)
+                .toArray(BaseComponent[]::new);
+        sendMessage(wrapped);
+    }
+    // MikroCord end
+
     /**
      * Get all groups this user is part of. This returns an unmodifiable
      * collection.
diff --git a/chat/pom.xml b/chat/pom.xml
index b8301dde..5da7fa52 100644
--- a/chat/pom.xml
+++ b/chat/pom.xml
@@ -25,5 +25,22 @@
             <version>2.8.0</version>
             <scope>compile</scope>
         </dependency>
+        <!-- MikroCord start - add KyoriPowered/text support -->
+        <dependency>
+            <groupId>net.kyori</groupId>
+            <artifactId>text-api</artifactId>
+            <version>2.0.0</version>
+        </dependency>
+        <dependency>
+            <groupId>net.kyori</groupId>
+            <artifactId>text-serializer-gson</artifactId>
+            <version>2.0.0</version>
+        </dependency>
+        <dependency>
+            <groupId>net.kyori</groupId>
+            <artifactId>text-serializer-legacy</artifactId>
+            <version>2.0.0</version>
+        </dependency>
+        <!-- MikroCord end -->
     </dependencies>
 </project>
diff --git a/chat/src/main/java/eu/mikroskeem/mikrocord/api/chat/AdapterComponent.java b/chat/src/main/java/eu/mikroskeem/mikrocord/api/chat/AdapterComponent.java
new file mode 100644
index 00000000..7d6920a0
--- /dev/null
+++ b/chat/src/main/java/eu/mikroskeem/mikrocord/api/chat/AdapterComponent.java
@@ -0,0 +1,43 @@
+package eu.mikroskeem.mikrocord.api.chat;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import lombok.AccessLevel;
+import lombok.NoArgsConstructor;
+import lombok.RequiredArgsConstructor;
+import net.kyori.text.Component;
+import net.kyori.text.serializer.legacy.LegacyComponentSerializer;
+import net.md_5.bungee.api.chat.BaseComponent;
+
+import java.lang.reflect.Type;
+
+/**
+ * Taken from https://github.com/KyoriPowered/text-extras/blob/08d40992cde519f53acdd6593288e4d8f91a7cce/adapter-bungeecord/src/main/java/net/kyori/text/adapter/bungeecord/TextAdapter.java
+ *
+ * @author Mark Vainomaa
+ */
+@RequiredArgsConstructor
+public final class AdapterComponent extends BaseComponent {
+    private final Component component;
+
+    @Override
+    public String toLegacyText() {
+        return LegacyComponentSerializer.INSTANCE.serialize(this.component);
+    }
+
+    @Override
+    public BaseComponent duplicate() {
+        return this;
+    }
+
+    @NoArgsConstructor(access = AccessLevel.PRIVATE)
+    public static class Serializer implements JsonSerializer<AdapterComponent> {
+        public static final Serializer INSTANCE = new Serializer();
+
+        @Override
+        public JsonElement serialize(final AdapterComponent src, final Type typeOfSrc, final JsonSerializationContext context) {
+            return context.serialize(src.component);
+        }
+    }
+}
diff --git a/chat/src/main/java/net/md_5/bungee/chat/ComponentSerializer.java b/chat/src/main/java/net/md_5/bungee/chat/ComponentSerializer.java
index eaf9f79f..953f459e 100644
--- a/chat/src/main/java/net/md_5/bungee/chat/ComponentSerializer.java
+++ b/chat/src/main/java/net/md_5/bungee/chat/ComponentSerializer.java
@@ -22,7 +22,8 @@ public class ComponentSerializer implements JsonDeserializer<BaseComponent>
 {
 
     private final static JsonParser JSON_PARSER = new JsonParser();
-    private final static Gson gson = new GsonBuilder().
+    private final static Gson gson = net.kyori.text.serializer.gson.GsonComponentSerializer.populate(new GsonBuilder()). // MikroCord - add KyoriPowered/text support
+            registerTypeAdapter(eu.mikroskeem.mikrocord.api.chat.AdapterComponent.class, eu.mikroskeem.mikrocord.api.chat.AdapterComponent.Serializer.INSTANCE). // MikroCord - add KyoriPowered/text support
             registerTypeAdapter( BaseComponent.class, new ComponentSerializer() ).
             registerTypeAdapter( TextComponent.class, new TextComponentSerializer() ).
             registerTypeAdapter( TranslatableComponent.class, new TranslatableComponentSerializer() ).
-- 
2.21.0

