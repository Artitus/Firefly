From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Thu, 3 Oct 2019 13:48:57 +0300
Subject: [PATCH] Use Java 11 Inflater/Deflater API

Credit for the idea goes to @astei

diff --git a/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java b/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
index d211cef6d592d7857f0ba828a78c547b7927f40b..e691c1652a55e7eb8b3c535b8742306f50bfac54 100644
--- a/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
+++ b/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
@@ -12,8 +12,10 @@ public class JavaCipher implements BungeeCipher
 {
 
     private final Cipher cipher;
+    /* // MikroCord start - use Java 11 Inflater/Deflater API
     private static final ThreadLocal<byte[]> heapInLocal = new EmptyByteThreadLocal();
     private static final ThreadLocal<byte[]> heapOutLocal = new EmptyByteThreadLocal();
+    */ // MikroCord end
 
     private static class EmptyByteThreadLocal extends ThreadLocal<byte[]>
     {
@@ -40,6 +42,7 @@ public class JavaCipher implements BungeeCipher
     @Override
     public void cipher(ByteBuf in, ByteBuf out) throws ShortBufferException
     {
+        /* // MikroCord start - use Java 11 Inflater/Deflater API
         int readableBytes = in.readableBytes();
         byte[] heapIn = bufToByte( in );
 
@@ -51,11 +54,16 @@ public class JavaCipher implements BungeeCipher
             heapOutLocal.set( heapOut );
         }
         out.writeBytes( heapOut, 0, cipher.update( heapIn, 0, readableBytes, heapOut ) );
+        */
+        out.ensureWritable(cipher.getOutputSize(in.readableBytes()));
+        out.writerIndex(cipher.update(in.nioBuffer(), out.nioBuffer(out.writerIndex(), out.writableBytes())));
+        // MikroCord end
     }
 
     @Override
     public ByteBuf cipher(ChannelHandlerContext ctx, ByteBuf in) throws ShortBufferException
     {
+        /* // MikroCord start - use Java 11 Inflater/Deflater API
         int readableBytes = in.readableBytes();
         byte[] heapIn = bufToByte( in );
 
@@ -63,6 +71,11 @@ public class JavaCipher implements BungeeCipher
         heapOut.writerIndex( cipher.update( heapIn, 0, readableBytes, heapOut.array(), heapOut.arrayOffset() ) );
 
         return heapOut;
+        */
+        ByteBuf out = ctx.alloc().heapBuffer(cipher.getOutputSize(in.readableBytes()));
+        out.writerIndex(cipher.update(in.nioBuffer(), out.nioBuffer(out.writerIndex(), out.writableBytes())));
+        return out;
+        // MikroCord end
     }
 
     @Override
@@ -70,6 +83,7 @@ public class JavaCipher implements BungeeCipher
     {
     }
 
+    /* // MikroCord start - use Java 11 Inflater/Deflater API
     private byte[] bufToByte(ByteBuf in)
     {
         byte[] heapIn = heapInLocal.get();
@@ -82,4 +96,5 @@ public class JavaCipher implements BungeeCipher
         in.readBytes( heapIn, 0, readableBytes );
         return heapIn;
     }
+    */ // MikroCord end
 }
