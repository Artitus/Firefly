From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Sun, 25 Aug 2019 05:00:39 +0300
Subject: [PATCH] Add Prometheus support


diff --git a/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java b/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
index 17aa4a1d1a8bc85cf9e15e742e23166d456eaa0e..a6aecceb7bc77b9005a3c28ba2f773929fbc5746 100644
--- a/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
+++ b/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
@@ -79,4 +79,20 @@ public interface FireflyProxyConfig {
      * @return Whether packet decode exceptions should be noisy or not
      */
     boolean isLogNoisyPacketDecodeException();
+
+    /**
+     * @return Whether Prometheus metrics should be enabled or not
+     */
+    boolean isPrometheusEnabled();
+
+    /**
+     * @return Hostname where Prometheus exporter should listen on
+     */
+    @NonNull
+    String getPrometheusListenHost();
+
+    /**
+     * @return Port where Prometheus exporter should listen on
+     */
+    int getPrometheusListenPort();
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index 20e207ce1cb8da13102a155e0e88b92d349793ed..9333b64248c4ab89fe9ce2829dbf09039bdfc064 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -24,6 +24,11 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
     @Setter private static java.util.function.BooleanSupplier noisyPacketDecodeExceptionSupplier;
     private final boolean noisyPacketDecodeException;
     // Firefly end
+    // Firefly start - add Prometheus metrics support
+    @Setter private static Runnable decodedMetric;
+    @Setter private static Runnable emptyPacketMetric;
+    @Setter private static Runnable invalidPacketMetric;
+    // Firefly end
 
     public MinecraftDecoder(Protocol protocol, boolean server, int protocolVersion) {
         this.protocol = protocol;
@@ -43,6 +48,7 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
         {
             // Waterfall start
             if (in.readableBytes() == 0) {
+                emptyPacketMetric.run(); // Firefly - add Prometheus metrics support
                 return;
             }
             // Waterfall end
@@ -60,6 +66,7 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
                 {
                     throw new BadPacketException( "Did not read all bytes from packet " + packet.getClass() + " " + packetId + " Protocol " + protocol + " Direction " + prot.getDirection() );
                 }
+                decodedMetric.run(); // Firefly - add Prometheus metrics support
             } else
             {
                 in.skipBytes( in.readableBytes() );
@@ -68,6 +75,7 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
             out.add( new PacketWrapper( packet, slice ) );
             slice = null;
         } catch (BadPacketException | IndexOutOfBoundsException e) {
+            invalidPacketMetric.run(); // Firefly - add Prometheus metrics support
             final String packetTypeStr;
             if (packetTypeInfo instanceof Integer) {
                 packetTypeStr = "id " + Integer.toHexString((Integer) packetTypeInfo);
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
index d4b0384348c17de5c2350c8c5f928fcc0c1868db..50f0460138ee34fab302bee708453b7ea47ca07e 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
@@ -15,6 +15,9 @@ public class MinecraftEncoder extends MessageToByteEncoder<DefinedPacket>
     private boolean server;
     @Setter
     private int protocolVersion;
+    // Firefly start - add Prometheus metrics support
+    @Setter private static Runnable encodedMetric;
+    // Firefly end
 
     @Override
     protected void encode(ChannelHandlerContext ctx, DefinedPacket msg, ByteBuf out) throws Exception
@@ -22,5 +25,6 @@ public class MinecraftEncoder extends MessageToByteEncoder<DefinedPacket>
         Protocol.DirectionData prot = ( server ) ? protocol.TO_CLIENT : protocol.TO_SERVER;
         DefinedPacket.writeVarInt( prot.getId( msg.getClass(), protocolVersion ), out );
         msg.write( out, prot.getDirection(), protocolVersion );
+        encodedMetric.run(); // Firefly - add Prometheus metrics support
     }
 }
diff --git a/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java b/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
index 20cfd14d69d294d70506b8694c311af513e573da..d08986932da4bc4a704feb4de9aeeeeb5bffd638 100644
--- a/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
+++ b/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
@@ -64,6 +64,15 @@ public class FireflyConfiguration extends WaterfallConfiguration {
     @Getter
     private boolean logNoisyPacketDecodeException = false;
 
+    @Getter
+    private boolean prometheusEnabled = true;
+
+    @Getter
+    private String prometheusListenHost = "127.0.0.1";
+
+    @Getter
+    private int prometheusListenPort = 8888;
+
     @Override
     public void load() {
         super.load();
@@ -83,6 +92,9 @@ public class FireflyConfiguration extends WaterfallConfiguration {
         internScoreboardTeamStrings = config.getBoolean("performance.intern_scoreboard_team_strings", internScoreboardTeamStrings);
         populateGS4QueryPlugins = config.getBoolean("query.populate_plugins", populateGS4QueryPlugins);
         logNoisyPacketDecodeException = config.getBoolean("log.noisy_packet_decode_exception", logNoisyPacketDecodeException);
+        prometheusEnabled = config.getBoolean("prometheus.enabled", prometheusEnabled);
+        prometheusListenHost = config.getString("prometheus.listen_host", prometheusListenHost);
+        prometheusListenPort = config.getInt("prometheus.listen_port", prometheusListenPort);
     }
 
     private TCPFastOpenMode setupTfo(int value) {
diff --git a/proxy/src/main/java/eu/mikroskeem/firefly/misc/PrometheusMetrics.java b/proxy/src/main/java/eu/mikroskeem/firefly/misc/PrometheusMetrics.java
new file mode 100644
index 0000000000000000000000000000000000000000..e1239484f90f32c5ba0aa3f05d4256ac6ebf45b7
--- /dev/null
+++ b/proxy/src/main/java/eu/mikroskeem/firefly/misc/PrometheusMetrics.java
@@ -0,0 +1,115 @@
+package eu.mikroskeem.firefly.misc;
+
+import eu.mikroskeem.jvmhiccup.HiccupMeterThread;
+import io.prometheus.client.Collector;
+import io.prometheus.client.Counter;
+import io.prometheus.client.Gauge;
+import io.prometheus.client.GaugeMetricFamily;
+import io.prometheus.client.exporter.HTTPServer;
+import io.prometheus.client.hotspot.DefaultExports;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.protocol.MinecraftDecoder;
+import net.md_5.bungee.protocol.MinecraftEncoder;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.IOException;
+import java.util.Collections;
+import java.util.List;
+import java.util.function.DoubleSupplier;
+
+/**
+ * @author Mark Vainomaa
+ */
+public final class PrometheusMetrics {
+    private static final Logger logger = LoggerFactory.getLogger(PrometheusMetrics.class);
+    private static final HiccupMeterThread hiccupMeter;
+
+    private static String prevHost = null;
+    private static Integer prevPort = null;
+    private static HTTPServer server = null;
+
+    public static final Gauge JVM_GC_HICCUP = Gauge
+            .build("jvm_gc_hiccup", "JVM GC hiccup")
+            .register();
+
+    public static final Collector CLIENTS_ONLINE = createGauge("clients_online", "Total clients online",
+            () -> ProxyServer.getInstance().getOnlineCount());
+    public static final Collector INSTALLED_PLUGINS = createGauge("plugins_installed", "Total plugins installed",
+            () -> ProxyServer.getInstance().getPluginManager().getPlugins().size());
+    public static final Counter RUNTIME_CONNECTED_CLIENTS = Counter
+            .build("clients_connected", "Total clients connected in proxy lifetime")
+            .register();
+
+    public static final Counter RUNTIME_PACKETS_DECODED = Counter
+            .build("packets_decoded", "Total packets successfully decoded in proxy lifetime")
+            .register();
+
+    public static final Counter RUNTIME_PACKETS_ENCODED = Counter
+            .build("packets_encoded", "Total packets successfully encoded in proxy lifetime")
+            .register();
+
+    public static final Counter RUNTIME_EMPTY_PACKETS_ENCOUNTERED = Counter
+            .build("empty_packets", "Total empty packets encountered in proxy lifetime")
+            .register();
+    public static final Counter RUNTIME_INVALID_PACKETS_ENCOUNTERED = Counter
+            .build("invalid_packets", "Total invalid packets encountered in proxy lifetime")
+            .register();
+
+    private static final boolean ENABLED;
+
+    static {
+        final Runnable noopRunnable = (ENABLED = ProxyServer.getInstance().getConfig().isPrometheusEnabled()) ? null : () -> {};
+        hiccupMeter = new HiccupMeterThread(JVM_GC_HICCUP::set);
+
+        // JVM metrics
+        if (ENABLED) {
+            DefaultExports.initialize();
+            hiccupMeter.start();
+        }
+
+        // Protocol decoder metrics
+        MinecraftDecoder.setDecodedMetric(ENABLED ? RUNTIME_PACKETS_DECODED::inc : noopRunnable);
+        MinecraftDecoder.setEmptyPacketMetric(ENABLED ? RUNTIME_EMPTY_PACKETS_ENCOUNTERED::inc : noopRunnable);
+        MinecraftDecoder.setInvalidPacketMetric(ENABLED ? RUNTIME_INVALID_PACKETS_ENCOUNTERED::inc : noopRunnable);
+
+        // Protocol encoder metrics
+        MinecraftEncoder.setEncodedMetric(ENABLED ? RUNTIME_PACKETS_ENCODED::inc : noopRunnable);
+    }
+
+    public static void initialize() {
+        if (!ENABLED) {
+            return;
+        }
+
+        // Set up exporter server
+        var host = ProxyServer.getInstance().getConfig().getPrometheusListenHost();
+        var port = ProxyServer.getInstance().getConfig().getPrometheusListenPort();
+        if ((prevHost == null || prevPort == null) || (!prevHost.equals(host) || port != prevPort)) {
+            deinitialize();
+            try {
+                server = new HTTPServer(host, port);
+                logger.info("Prometheus HTTP server listening at http://{}:{}", host, port);
+            } catch (IOException e) {
+                logger.warn("Failed to start Prometheus HTTP server at http://{}:{}", host, port, e);
+            }
+        }
+    }
+
+    public static void deinitialize() {
+        if (ENABLED && server != null) {
+            server.stop();
+            logger.info("Prometheus HTTP server stopped");
+        }
+    }
+
+    private static Collector createGauge(String name, String help, DoubleSupplier valueSupplier) {
+        var gauge = new Collector() {
+            @Override
+            public List<MetricFamilySamples> collect() {
+                return Collections.singletonList(new GaugeMetricFamily(name, help, valueSupplier.getAsDouble()));
+            }
+        };
+        return gauge.register();
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 102c265b8a13f928205a924807de77d521b3dcfc..7f13eea6bf7245f2b61af584c95c537604be23ca 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -353,6 +353,7 @@ public class BungeeCord extends ProxyServer
         {
             connectionThrottle = new ConnectionThrottle( config.getThrottle(), config.getThrottleLimit() );
         }
+        eu.mikroskeem.firefly.misc.PrometheusMetrics.initialize(); // Firefly - add Prometheus metrics support
         startListeners();
 
         saveThread.scheduleAtFixedRate( new TimerTask()
@@ -495,6 +496,7 @@ public class BungeeCord extends ProxyServer
         isRunning = false;
 
         stopListeners();
+        eu.mikroskeem.firefly.misc.PrometheusMetrics.deinitialize(); // Firefly - add Prometheus metrics support
         getLogger().info( "Closing pending connections" );
 
         Collection<UserConnection> disconnectingPlayers; // Firefly - wait for all players to disconnect instead of using hardcoded delay
@@ -861,6 +863,7 @@ public class BungeeCord extends ProxyServer
             connections.put( con.getName(), con );
             connectionsByUUID.put( con.getUniqueId(), con );
             connectionsByOfflineUUID.put( con.getPendingConnection().getOfflineId(), con );
+            eu.mikroskeem.firefly.misc.PrometheusMetrics.RUNTIME_CONNECTED_CLIENTS.inc(); // Firefly - add Prometheus metrics support
         } finally
         {
             connectionLock.writeLock().unlock();
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java b/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
index 7cf5ebe77c9325eb4440c63d832a6aabd0ad9b0d..db52f3bb158ba8384d7a5df55b7f427aee9bacf0 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
@@ -22,6 +22,7 @@ public class CommandReload extends Command
         BungeeCord.getInstance().stopListeners();
         BungeeCord.getInstance().startListeners();
         BungeeCord.getInstance().getPluginManager().callEvent( new ProxyReloadEvent( sender ) );
+        eu.mikroskeem.firefly.misc.PrometheusMetrics.initialize(); // Firefly - add Prometheus metrics support
 
         sender.sendMessage(ChatColor.GREEN + "Firefly has been reloaded"); if(true) return; // Firefly
         sender.sendMessage( ChatColor.BOLD.toString() + ChatColor.RED.toString() + "Waterfall has been reloaded."
