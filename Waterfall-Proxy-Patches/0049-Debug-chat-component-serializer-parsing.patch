From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Mon, 6 Jan 2020 17:10:11 +0200
Subject: [PATCH] Debug chat component serializer parsing


diff --git a/chat/src/main/java/net/md_5/bungee/chat/ComponentSerializer.java b/chat/src/main/java/net/md_5/bungee/chat/ComponentSerializer.java
index a9950b4ae1d860a3177d2fe3f80e7244037edcdb..d69660081a4a0cea127f1a014847f32b3b7f716a 100644
--- a/chat/src/main/java/net/md_5/bungee/chat/ComponentSerializer.java
+++ b/chat/src/main/java/net/md_5/bungee/chat/ComponentSerializer.java
@@ -31,8 +31,21 @@ public class ComponentSerializer implements JsonDeserializer<BaseComponent>
             create();
 
     public static final ThreadLocal<Set<BaseComponent>> serializedComponents = new ThreadLocal<Set<BaseComponent>>();
-
-    public static BaseComponent[] parse(String json)
+    // MikroCord start - debug chat component serializer parsing
+    public static java.util.concurrent.atomic.AtomicBoolean debugJsonParsing = new java.util.concurrent.atomic.AtomicBoolean(false);
+    public static BaseComponent[] parse(String json) {
+        if (!debugJsonParsing.get()) {
+            return oldParse(json);
+        }
+        try {
+            return oldParse(json);
+        } catch (Exception e) {
+            System.err.println("Failed to deserialize json:\n\n\t" + json + "\n");
+            throw e;
+        }
+    }
+    public static BaseComponent[] oldParse(String json)
+    // MikroCord end
     {
         JsonElement jsonElement = JSON_PARSER.parse( json );
 
diff --git a/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java b/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java
index 0302528391ab16f8fdadf4bdd601b3b5728023d7..3ffb841becd6436b7aa594adabc6a1846aa79837 100644
--- a/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java
+++ b/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java
@@ -8,6 +8,7 @@ import io.github.waterfallmc.waterfall.conf.WaterfallConfiguration;
 import lombok.Getter;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.config.ConfigurationAdapter;
+import net.md_5.bungee.chat.ComponentSerializer;
 import net.md_5.bungee.netty.PipelineUtils;
 import net.md_5.bungee.protocol.MinecraftDecoder;
 import net.md_5.bungee.protocol.Varint21FrameDecoder;
@@ -84,6 +85,9 @@ public class MikroCordConfiguration extends WaterfallConfiguration {
     @Getter
     private boolean logPacketDecodeErrors = false;
 
+    @Getter
+    private boolean logUnparsableChatJson = true;
+
     @Override
     public void load() {
         super.load();
@@ -108,6 +112,8 @@ public class MikroCordConfiguration extends WaterfallConfiguration {
         logInvalidLoginPackets = config.getBoolean("log.invalid_login_process_packets", logInvalidLoginPackets);
         dropConnectionsSendingInvalidPackets = config.getBoolean("packets.drop_invalid_packet_senders", dropConnectionsSendingInvalidPackets);
         logPacketDecodeErrors = config.getBoolean("packets.log_packet_decode_errors", logPacketDecodeErrors);
+        logUnparsableChatJson = config.getBoolean("log.unparsable_chat_json", logUnparsableChatJson);
+        ComponentSerializer.debugJsonParsing.set(logUnparsableChatJson);
     }
 
     private TCPFastOpenMode setupTfo(int value) {
