From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Fri, 27 Sep 2019 11:43:42 +0300
Subject: [PATCH] Bake event handlers after enabling plugins


diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index c7dcd93eba3d5e6d50f7f445d04a49e73a280697..1c0c529809ecdd5d355bab1920f6958a0c7e7fc6 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -324,6 +324,7 @@ public class PluginManager
                 ProxyServer.getInstance().getLogger().log( Level.WARNING, "Exception encountered when loading plugin: " + plugin.getDescription().getName(), t );
             }
         }
+        this.eventBus.doBakeHandlers(); // Firefly - bake event handlers after enabling plugins
     }
 
     private boolean enablePlugin(Map<PluginDescription, Boolean> pluginStatuses, Stack<PluginDescription> dependStack, PluginDescription plugin)
@@ -496,6 +497,11 @@ public class PluginManager
                     "Listener %s has registered using deprecated subscribe annotation! Please update to @EventHandler.", listener );
         }
         */ // Firefly end
+        // Firefly start - bake event handlers after enabling plugins
+        if (eventBus.isInitialBakeDone()) {
+            ProxyServer.getInstance().getLogger().log(Level.WARNING, "Plugin {0} registered listener {1} post-enable, this is discouraged", new Object[]{ plugin, listener.getClass().getName() });
+        }
+        // Firefly end
         eventBus.register( listener );
         listenersByPlugin.put( plugin, listener );
     }
diff --git a/event/src/main/java/net/md_5/bungee/event/EventBus.java b/event/src/main/java/net/md_5/bungee/event/EventBus.java
index ac2cdd90246a20165e0410eb9aae886aec04d4e0..53904d38e952e809ccf8bccde2eb8fa1e4796b13 100644
--- a/event/src/main/java/net/md_5/bungee/event/EventBus.java
+++ b/event/src/main/java/net/md_5/bungee/event/EventBus.java
@@ -22,10 +22,12 @@ public class EventBus
     private final Map<Class<?>, EventHandlerMethod[]> byEventBaked = new ConcurrentHashMap<>();
     private final Lock lock = new ReentrantLock();
     private final Logger logger;
+    @lombok.Getter private boolean initialBakeDone = false; // Firefly - bake event handlers after enabling plugins
 
     public EventBus()
     {
         this( null );
+        this.initialBakeDone = true; // Firefly - bake event handlers after enabling plugins; This is only used in unit tests
     }
 
     public EventBus(Logger logger)
@@ -122,6 +124,7 @@ public class EventBus
                     currentPriorityMap.put( listener, entry.getValue().toArray( new Method[0] ) );
                     // Firefly end
                 }
+                if (initialBakeDone) // Firefly - bake event handlers after enabling plugins
                 bakeHandlers( e.getKey() );
             }
         } finally
@@ -158,6 +161,7 @@ public class EventBus
                         byListenerAndPriority.remove( e.getKey() );
                     }
                 }
+                if (initialBakeDone) // Firefly - bake event handlers after enabling plugins
                 bakeHandlers( e.getKey() );
             }
         } finally
@@ -166,6 +170,27 @@ public class EventBus
         }
     }
 
+    // Firefly start - bake event handlers after enabling plugins
+    public void doBakeHandlers() {
+        if (initialBakeDone) {
+            return;
+        }
+
+        try {
+            lock.lock();
+
+            var eventClasses = byListenerAndPriority.keySet();
+            for (Class<?> eventClass : eventClasses) {
+                bakeHandlers(eventClass);
+            }
+        } finally {
+            lock.unlock();
+        }
+
+        initialBakeDone = true;
+    }
+    // Firefly end
+
     /**
      * Shouldn't be called without first locking the writeLock; intended for use
      * only inside {@link #register(java.lang.Object) register(Object)} or
