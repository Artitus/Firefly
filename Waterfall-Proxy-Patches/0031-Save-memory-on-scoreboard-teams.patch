From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Mon, 17 Jun 2019 14:45:40 +0300
Subject: [PATCH] Save memory on scoreboard teams


diff --git a/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java b/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
index 055b13a27016397d5eee1920286c6b30d1252264..4216d9dfb8963577f10e1a3a601f9b3387ebc862 100644
--- a/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
+++ b/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
@@ -62,4 +62,11 @@ public interface FireflyProxyConfig {
      * @return Whether tablist should be rewritten on online mode connections or not
      */
     boolean isAllowTablistRewrite();
+
+    /**
+     * Whether scoreboard team strings should be {@link String#intern()}-ed or not
+     *
+     * @return Whether scoreboard team strings should be interned or not
+     */
+    boolean isInternScoreboardTeamStrings();
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/score/Team.java b/api/src/main/java/net/md_5/bungee/api/score/Team.java
index 39f81fd1a68fc8f2908aad2c79b832d90ba18fba..dfa02d3b91fb2ce5243170794d38cf1e21400368 100644
--- a/api/src/main/java/net/md_5/bungee/api/score/Team.java
+++ b/api/src/main/java/net/md_5/bungee/api/score/Team.java
@@ -17,8 +17,8 @@ public class Team
     private String prefix;
     private String suffix;
     private byte friendlyFire;
-    private String nameTagVisibility;
-    private String collisionRule;
+    private NametagVisibility nameTagVisibility; // Firefly - save memory on scoreboard teams
+    private CollisionRule collisionRule; // Firefly - save memory on scoreboard teams
     private int color;
     private Set<String> players = new HashSet<>();
 
@@ -36,4 +36,91 @@ public class Team
     {
         players.remove( name );
     }
+
+    // Firefly start - save memory on scoreboard teams
+    public void setDisplayName(String displayName) {
+        this.displayName = net.md_5.bungee.api.ProxyServer.getInstance().getConfig().isInternScoreboardTeamStrings() ? displayName.intern() : displayName;
+    }
+
+    public void setPrefix(String prefix) {
+        this.prefix = net.md_5.bungee.api.ProxyServer.getInstance().getConfig().isInternScoreboardTeamStrings() ? prefix.intern() : prefix;
+    }
+
+    public void setSuffix(String suffix) {
+        this.suffix = net.md_5.bungee.api.ProxyServer.getInstance().getConfig().isInternScoreboardTeamStrings() ? suffix.intern() : suffix;
+    }
+
+    @Deprecated
+    public String getNameTagVisibility() {
+        return nameTagVisibility == null ? null : nameTagVisibility.getValue();
+    }
+
+    @Deprecated
+    public void setNameTagVisibility(String value) {
+        NametagVisibility enumValue;
+        if (value == null) {
+            enumValue = null;
+        } else if ((enumValue = NametagVisibility.VALUES.get(value)) == null) {
+            net.md_5.bungee.api.ProxyServer.getInstance().getLogger().log(java.util.logging.Level.WARNING, "Unknown team name tag visibility value: {0} -> {1}", new Object[] { name, value });
+        }
+        this.nameTagVisibility = enumValue;
+    }
+
+    @Deprecated
+    public String getCollisionRule() {
+        return collisionRule == null ? null : collisionRule.getValue();
+    }
+
+    @Deprecated
+    public void setCollisionRule(String value) {
+        CollisionRule enumValue;
+        if (value == null) {
+            enumValue = null;
+        } else if ((enumValue = CollisionRule.VALUES.get(value)) == null) {
+            net.md_5.bungee.api.ProxyServer.getInstance().getLogger().log(java.util.logging.Level.WARNING, "Unknown team collision rule value: {0} -> {1}", new Object[] { name, value });
+        }
+        this.collisionRule = enumValue;
+    }
+
+    @lombok.RequiredArgsConstructor
+    public enum CollisionRule {
+        ALWAYS("always"),
+        PUSH_OTHER_TEAMS("pushOtherTeams"),
+        PUSH_OWN_TEAM("pushOwnTeam"),
+        NEVER("never"),
+        ;
+
+        @lombok.Getter
+        private final String value;
+
+        public static final java.util.Map<String, CollisionRule> VALUES = new java.util.HashMap<>();
+
+        static {
+            for (CollisionRule value : values()) {
+                VALUES.put(value.getValue(), value);
+            }
+        }
+    }
+
+    @lombok.RequiredArgsConstructor
+    public enum NametagVisibility {
+        ALWAYS("always"),
+        HIDE_FOR_OTHER_TEAMS("hideForOtherTeams"),
+        HIDE_FOR_OWN_TEAM("hideForOwnTeam"),
+        NEVER("never"),
+        EMPTY_STRING(""), // Viaversion does this
+        ;
+
+        @lombok.Getter
+        private final String value;
+
+        public static final java.util.Map<String, NametagVisibility> VALUES = new java.util.HashMap<>();
+
+        static {
+            for (NametagVisibility value : values()) {
+                VALUES.put(value.getValue(), value);
+            }
+        }
+    }
+    // Firefly end
 }
diff --git a/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java b/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
index 7b6a539aace1923651790d90e2bb8e9ad4c9c1ab..a654bcec0681b8063119f1c9e3a8e8be394e44c7 100644
--- a/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
+++ b/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
@@ -49,6 +49,9 @@ public class FireflyConfiguration extends WaterfallConfiguration {
     @Getter
     private boolean allowTablistRewrite = true;
 
+    @Getter
+    private boolean internScoreboardTeamStrings = false;
+
     @Override
     public void load() {
         super.load();
@@ -64,7 +67,8 @@ public class FireflyConfiguration extends WaterfallConfiguration {
         tcpFastOpenEnabled = config.getBoolean("networking.tcp_fast_open.enabled", tcpFastOpenEnabled);
         tcpFastOpenMode = setupTfo(config.getInt("networking.tcp_fast_open.mode", tcpFastOpenMode.value));
         waitForAllPlayersToDisconnectInfinitely = config.getBoolean("shutdown.wait_for_all_players_to_disconnect_infinitely", waitForAllPlayersToDisconnectInfinitely);
-        allowTablistRewrite = config.getBoolean("allow_tablist_rewrite", allowTablistRewrite);
+        allowTablistRewrite = config.getBoolean("performance.allow_tablist_rewrite", allowTablistRewrite);
+        internScoreboardTeamStrings = config.getBoolean("performance.intern_scoreboard_team_strings", internScoreboardTeamStrings);
     }
 
     private TCPFastOpenMode setupTfo(int value) {
