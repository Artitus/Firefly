From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Wed, 29 May 2019 20:40:02 +0300
Subject: [PATCH] Speed up shutdown


diff --git a/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java b/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
index d228ec40c5096a1b18ac1fc26d179781cdb1fb25..461b2641ec2445927130e258379c3235eb070c5d 100644
--- a/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
+++ b/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
@@ -52,4 +52,9 @@ public interface FireflyProxyConfig {
      */
     @NonNull
     TCPFastOpenMode getTcpFastOpenMode();
+
+    /**
+     * @return Whether proxy should wait for all players to disconnect infinitely or not
+     */
+    boolean isWaitForAllPlayersToDisconnectInfinitely();
 }
diff --git a/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java b/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
index 2d5d57bdafa876053a0d17fa9517a03fab93adee..374d68b9ea690a864dec33b9772dbe713a688618 100644
--- a/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
+++ b/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
@@ -1,8 +1,8 @@
 package eu.mikroskeem.firefly.conf;
 
 import com.google.common.collect.ImmutableList;
-import eu.mikroskeem.firefly.api.network.TCPFastOpenMode;
 import eu.mikroskeem.firefly.api.network.EventLoopGroupType;
+import eu.mikroskeem.firefly.api.network.TCPFastOpenMode;
 import eu.mikroskeem.firefly.misc.VelocitySupport;
 import io.github.waterfallmc.waterfall.conf.WaterfallConfiguration;
 import lombok.Getter;
@@ -43,6 +43,9 @@ public class FireflyConfiguration extends WaterfallConfiguration {
     @Getter
     private TCPFastOpenMode tcpFastOpenMode = TCPFastOpenMode.CLIENT_ONLY;
 
+    @Getter
+    private boolean waitForAllPlayersToDisconnectInfinitely = true;
+
     @Override
     public void load() {
         super.load();
@@ -57,6 +60,7 @@ public class FireflyConfiguration extends WaterfallConfiguration {
         velocityForwardingSecret = config.getString("velocity_modern_forwarding.secret", () -> VelocitySupport.generateRandomString(12)).getBytes(StandardCharsets.UTF_8);
         tcpFastOpenEnabled = config.getBoolean("networking.tcp_fast_open.enabled", tcpFastOpenEnabled);
         tcpFastOpenMode = setupTfo(config.getInt("networking.tcp_fast_open.mode", tcpFastOpenMode.value));
+        waitForAllPlayersToDisconnectInfinitely = config.getBoolean("shutdown.wait_for_all_players_to_disconnect_infinitely", waitForAllPlayersToDisconnectInfinitely);
     }
 
     private TCPFastOpenMode setupTfo(int value) {
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 8c084a712a302b5913d2d39d7c28f02cbc4aeb91..652198b203354933272f41c5e072ca93052e52e3 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -495,9 +495,11 @@ public class BungeeCord extends ProxyServer
         stopListeners();
         getLogger().info( "Closing pending connections" );
 
+        Collection<UserConnection> disconnectingPlayers; // Firefly - wait for all players to disconnect instead of using hardcoded delay
         connectionLock.readLock().lock();
         try
         {
+            disconnectingPlayers = java.util.Set.copyOf(connections.values()); // Firefly - wait for all players to disconnect instead of using hardcoded delay
             getLogger().log( Level.INFO, "Disconnecting {0} connections", connections.size() );
             for ( UserConnection user : connections.values() )
             {
@@ -508,12 +510,32 @@ public class BungeeCord extends ProxyServer
             connectionLock.readLock().unlock();
         }
 
+        /* Firefly start - wait for all players to disconnect instead of using hardcoded delay
         try
         {
             Thread.sleep( 500 );
         } catch ( InterruptedException ex )
         {
         }
+        */
+        try {
+            var disconnectFuture = java.util.concurrent.CompletableFuture
+                    .allOf(disconnectingPlayers.stream()
+                            .map(UserConnection::getDisconnectFuture)
+                            .toArray(java.util.concurrent.CompletableFuture[]::new));
+            if (config.isWaitForAllPlayersToDisconnectInfinitely()) {
+                disconnectFuture.get();
+            } else {
+                disconnectFuture.get(10, TimeUnit.SECONDS);
+            }
+        } catch (java.util.concurrent.ExecutionException e) {
+            throw new RuntimeException(e);
+        } catch (java.util.concurrent.TimeoutException e) {
+            getLogger().log(Level.WARNING, "Timeout while waiting all players to clean up - something is taking too long!", e);
+        } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
+        }
+        // Firefly end
 
         if ( reconnectHandler != null )
         {
@@ -543,8 +565,8 @@ public class BungeeCord extends ProxyServer
         }
 
         getLogger().info( "Closing IO threads" );
-                bossEventLoopGroup.shutdownGracefully();
-                workerEventLoopGroup.shutdownGracefully();
+                bossEventLoopGroup.shutdownGracefully(100, 5000, TimeUnit.MILLISECONDS); // Firefly - speed up shutdown
+                workerEventLoopGroup.shutdownGracefully(100, 5000, TimeUnit.MILLISECONDS); // Firefly - speed up shutdown
                 while (true) {
                     try {
                         bossEventLoopGroup.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 4c009edf7ec3b887fc82fbb83ae8df51e916f7e6..194b06b6abcdf6a5650136131765129515ad8cde 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -152,6 +152,7 @@ public final class UserConnection implements ProxiedPlayer, eu.mikroskeem.firefl
             ch.write( packet );
         }
     };
+    @Getter private final java.util.concurrent.CompletableFuture<Void> disconnectFuture = new java.util.concurrent.CompletableFuture<>(); // Firefly - wait for all players to disconnect instead of using hardcoded delay
 
     public void init()
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index 4d8bac5d171e0e0d98b7876aa09c1a9a6d4d20eb..f987995e43c12462977b12074ec9c03bd3323e95 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -88,6 +88,7 @@ public class UpstreamBridge extends PacketHandler
             }
             con.getServer().disconnect( "Quitting" );
         }
+        this.con.getDisconnectFuture().complete(null); // Firefly - wait for all players to disconnect instead of using hardcoded delay
     }
 
     @Override
