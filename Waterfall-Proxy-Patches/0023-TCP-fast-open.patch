From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Wed, 29 May 2019 20:02:24 +0300
Subject: [PATCH] TCP fast open


diff --git a/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java b/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
index 64926d44f5995f46da17e33dc98fc1807564febe..d228ec40c5096a1b18ac1fc26d179781cdb1fb25 100644
--- a/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
+++ b/api/src/main/java/eu/mikroskeem/firefly/api/config/FireflyProxyConfig.java
@@ -1,5 +1,6 @@
 package eu.mikroskeem.firefly.api.config;
 
+import eu.mikroskeem.firefly.api.network.TCPFastOpenMode;
 import org.checkerframework.checker.nullness.qual.NonNull;
 
 import java.util.Set;
@@ -40,4 +41,15 @@ public interface FireflyProxyConfig {
      * @return Velocity modern forwarding secret
      */
     byte @NonNull [] getVelocityForwardingSecret();
+
+    /**
+     * @return Whether TCP Fast Open is enabled or not
+     */
+    boolean isTcpFastOpenEnabled();
+
+    /**
+     * @return TCP Fast Open mode
+     */
+    @NonNull
+    TCPFastOpenMode getTcpFastOpenMode();
 }
diff --git a/api/src/main/java/eu/mikroskeem/firefly/api/network/TCPFastOpenMode.java b/api/src/main/java/eu/mikroskeem/firefly/api/network/TCPFastOpenMode.java
new file mode 100644
index 0000000000000000000000000000000000000000..00cd3700cd370e885f98566c185b52d8b978a94b
--- /dev/null
+++ b/api/src/main/java/eu/mikroskeem/firefly/api/network/TCPFastOpenMode.java
@@ -0,0 +1,29 @@
+package eu.mikroskeem.firefly.api.network;
+
+/**
+ * See https://en.wikipedia.org/wiki/TCP_Fast_Open
+ *
+ * @author Mark Vainomaa
+ */
+public enum TCPFastOpenMode {
+    DISABLED(0),
+    CLIENT_ONLY(1),
+    SERVER_ONLY(2),
+    BOTH(3),
+    ;
+
+    public final int value;
+
+    TCPFastOpenMode(int value) {
+        this.value = value;
+    }
+
+    public static TCPFastOpenMode fromValue(int value) {
+        for (var enumValue : TCPFastOpenMode.values()) {
+            if (enumValue.value == value)
+                return enumValue;
+        }
+
+        return DISABLED;
+    }
+}
diff --git a/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java b/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
index 00457022ff00b3708060e9dbbf23cbe82e109ead..79d37cf0bab25301b713361ee71e29ae1f447276 100644
--- a/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
+++ b/proxy/src/main/java/eu/mikroskeem/firefly/conf/FireflyConfiguration.java
@@ -1,6 +1,7 @@
 package eu.mikroskeem.firefly.conf;
 
 import com.google.common.collect.ImmutableList;
+import eu.mikroskeem.firefly.api.network.TCPFastOpenMode;
 import eu.mikroskeem.firefly.misc.VelocitySupport;
 import io.github.waterfallmc.waterfall.conf.WaterfallConfiguration;
 import lombok.Getter;
@@ -10,6 +11,7 @@ import net.md_5.bungee.api.config.ConfigurationAdapter;
 import java.nio.charset.StandardCharsets;
 import java.util.HashSet;
 import java.util.Set;
+import java.util.logging.Level;
 
 /**
  * @author Mark Vainomaa
@@ -33,6 +35,12 @@ public class FireflyConfiguration extends WaterfallConfiguration {
     @Getter
     private byte[] velocityForwardingSecret;
 
+    @Getter
+    private boolean tcpFastOpenEnabled = true;
+
+    @Getter
+    private TCPFastOpenMode tcpFastOpenMode = TCPFastOpenMode.CLIENT_ONLY;
+
     @Override
     public void load() {
         super.load();
@@ -45,5 +53,13 @@ public class FireflyConfiguration extends WaterfallConfiguration {
         logInvalidQueryPackets = config.getBoolean("log.invalid_query_packets", logInvalidQueryPackets);
         velocityForwardingSupport = config.getBoolean("velocity_modern_forwarding.enabled", velocityForwardingSupport);
         velocityForwardingSecret = config.getString("velocity_modern_forwarding.secret", () -> VelocitySupport.generateRandomString(12)).getBytes(StandardCharsets.UTF_8);
+        tcpFastOpenEnabled = config.getBoolean("networking.tcp_fast_open.enabled", tcpFastOpenEnabled);
+        tcpFastOpenMode = setupTfo(config.getInt("networking.tcp_fast_open.mode", tcpFastOpenMode.value));
+    }
+
+    private TCPFastOpenMode setupTfo(int value) {
+        var actual = TCPFastOpenMode.fromValue(value);
+        ProxyServer.getInstance().getLogger().log(Level.INFO, "TCP fast open mode is set to {0}", actual.name());
+        return actual;
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 9a39f69e9b93708eb69cba16ae3685a8acef3bf8..4d2d014de20eb20759e1b802833f720714caa10e 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -88,6 +88,11 @@ public class PipelineUtils
                 ch.close();
                 return;
             }
+            // Firefly start - TCP fast open
+            if (epoll && BungeeCord.getInstance().getConfig().isTcpFastOpenEnabled()) {
+                ch.config().setOption(io.netty.channel.epoll.EpollChannelOption.TCP_FASTOPEN, BungeeCord.getInstance().getConfig().getTcpFastOpenMode().value);
+            }
+            // Firefly end
             ch.pipeline().addBefore( FRAME_DECODER, LEGACY_DECODER, new LegacyDecoder() );
             ch.pipeline().addAfter( FRAME_DECODER, PACKET_DECODER, new MinecraftDecoder( Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion() ) );
             ch.pipeline().addAfter( FRAME_PREPENDER, PACKET_ENCODER, new MinecraftEncoder( Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion() ) );
