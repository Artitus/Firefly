From 0f0943bf7a27d1b707b9eedb8cfe5280afe6e39b Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Sat, 13 Apr 2019 20:13:53 +0300
Subject: [PATCH] Make packet manipulation easier


diff --git a/api/src/main/java/eu/mikroskeem/mikrocord/api/network/ChannelHolder.java b/api/src/main/java/eu/mikroskeem/mikrocord/api/network/ChannelHolder.java
new file mode 100644
index 00000000..834540a4
--- /dev/null
+++ b/api/src/main/java/eu/mikroskeem/mikrocord/api/network/ChannelHolder.java
@@ -0,0 +1,10 @@
+package eu.mikroskeem.mikrocord.api.network;
+
+import io.netty.channel.Channel;
+
+/**
+ * @author Mark Vainomaa
+ */
+public interface ChannelHolder {
+    Channel getChannel();
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/Connection.java b/api/src/main/java/net/md_5/bungee/api/connection/Connection.java
index eb7e3947..5c196bd9 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/Connection.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/Connection.java
@@ -10,7 +10,7 @@ import net.md_5.bungee.protocol.DefinedPacket;
  * It should expose information about the remote peer, however not be specific
  * to a type of connection, whether server or player.
  */
-public interface Connection
+public interface Connection extends eu.mikroskeem.mikrocord.api.network.ChannelHolder // MikroCord - make packet manipulation easier
 {
 
     /**
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index 01af5c1c..3c784e49 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -348,7 +348,7 @@ public enum Protocol
     }
 
     @Data
-    private static class ProtocolMapping
+    public static class ProtocolMapping // MikroCord - make packet manipulation easier
     {
 
         private final int protocolVersion;
@@ -356,16 +356,17 @@ public enum Protocol
     }
 
     // Helper method
-    private static ProtocolMapping map(int protocol, int id)
+    public static ProtocolMapping map(int protocol, int id) // MikroCord - make packet manipulation easier
     {
         return new ProtocolMapping( protocol, id );
     }
 
-    static final class DirectionData
+    public static final class DirectionData // MikroCord - make packet manipulation easier
     {
 
         private final TIntObjectMap<ProtocolData> protocols = new TIntObjectHashMap<>();
         //
+        @Getter // MikroCord - make packet manipulation easier
         private final Protocol protocolPhase;
         @Getter
         private final ProtocolConstants.Direction direction;
@@ -381,7 +382,7 @@ public enum Protocol
             }
         }
 
-        private ProtocolData getProtocolData(int version)
+        public ProtocolData getProtocolData(int version) // MikroCord - make packet manipulation easier
         {
             ProtocolData protocol = protocols.get( version );
             if ( protocol == null && ( protocolPhase != Protocol.GAME ) )
@@ -422,7 +423,7 @@ public enum Protocol
             }
         }
 
-        private void registerPacket(Class<? extends DefinedPacket> packetClass, ProtocolMapping... mappings)
+        public void registerPacket(Class<? extends DefinedPacket> packetClass, ProtocolMapping... mappings) // MikroCord - make packet manipulation easier
         {
             try
             {
@@ -461,7 +462,7 @@ public enum Protocol
             }
         }
 
-        final int getId(Class<? extends DefinedPacket> packet, int version)
+        public final int getId(Class<? extends DefinedPacket> packet, int version) // MikroCord - make packet manipulation easier
         {
 
             ProtocolData protocolData = getProtocolData( version );
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
index d11d601e..789a8ec1 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
@@ -12,7 +12,7 @@ import net.md_5.bungee.protocol.DefinedPacket;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 
 @RequiredArgsConstructor
-public class ServerConnection implements Server
+public class ServerConnection implements Server, eu.mikroskeem.mikrocord.api.network.ChannelHolder // MikroCord - make packet manipulation easier
 {
 
     @Getter
@@ -80,4 +80,10 @@ public class ServerConnection implements Server
     {
         return unsafe;
     }
+    // MikroCord start - make packet manipulation easier
+    @Override
+    public io.netty.channel.Channel getChannel() {
+        return ch.getHandle();
+    }
+    // MikroCord end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index 110ac496..75132843 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -53,7 +53,7 @@ import net.md_5.bungee.util.BufUtil;
 import net.md_5.bungee.util.QuietException;
 
 @RequiredArgsConstructor
-public class ServerConnector extends PacketHandler
+public class ServerConnector extends PacketHandler implements eu.mikroskeem.mikrocord.api.network.ChannelHolder // MikroCord - make packet manipulation easier
 {
 
     private final ProxyServer bungee;
@@ -429,4 +429,10 @@ public class ServerConnector extends PacketHandler
     {
         return "[" + user.getName() + "|" + user.getAddress() + "] <-> ServerConnector [" + target.getName() + "]";
     }
+    // MikroCord start - make packet manipulation easier
+    @Override
+    public io.netty.channel.Channel getChannel() {
+        return ch.getHandle();
+    }
+    // MikroCord end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index e649678e..5230ac46 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -65,7 +65,7 @@ import net.md_5.bungee.util.CaseInsensitiveSet;
 import net.md_5.bungee.util.ChatComponentTransformer;
 
 @RequiredArgsConstructor
-public final class UserConnection implements ProxiedPlayer
+public final class UserConnection implements ProxiedPlayer, eu.mikroskeem.mikrocord.api.network.ChannelHolder // MikroCord - make packet manipulation easier
 {
 
     /*========================================================================*/
@@ -744,4 +744,10 @@ public final class UserConnection implements ProxiedPlayer
         return disableEntityMetadaRewrite;
     }
     // Waterfall end
+    // MikroCord start - make packet manipulation easier
+    @Override
+    public io.netty.channel.Channel getChannel() {
+        return ch.getHandle();
+    }
+    // MikroCord end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 765731d8..09d51703 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -640,4 +640,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         return !ch.isClosed();
     }
+    // MikroCord start - make packet manipulation easier
+    @Override
+    public io.netty.channel.Channel getChannel() {
+        return ch.getHandle();
+    }
+    // MikroCord end
 }
-- 
2.21.0

