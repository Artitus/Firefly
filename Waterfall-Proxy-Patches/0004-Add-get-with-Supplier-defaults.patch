From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Wed, 29 May 2019 16:23:51 +0300
Subject: [PATCH] Add get* with Supplier defaults


diff --git a/api/src/main/java/net/md_5/bungee/api/config/ConfigurationAdapter.java b/api/src/main/java/net/md_5/bungee/api/config/ConfigurationAdapter.java
index 8ee8d33fe1b69227ad39615382f0bdccbb40df4d..31b6ea53d40fc995087a8afb367c23c4f4f1dce7 100644
--- a/api/src/main/java/net/md_5/bungee/api/config/ConfigurationAdapter.java
+++ b/api/src/main/java/net/md_5/bungee/api/config/ConfigurationAdapter.java
@@ -24,6 +24,7 @@ public interface ConfigurationAdapter
      * @return the retrieved integer
      */
     public int getInt(String path, int def);
+    default int getInt(String path, java.util.function.Supplier<Integer> def) { return getInt(path, def.get()); } // MikroCord - Add get* with Supplier defaults
 
     /**
      * Gets a string from the specified path.
@@ -33,6 +34,7 @@ public interface ConfigurationAdapter
      * @return the retrieved string
      */
     public String getString(String path, String def);
+    default String getString(String path, java.util.function.Supplier<String> def) { return getString(path, def.get()); } // MikroCord - Add get* with Supplier defaults
 
     /**
      * Gets a boolean from the specified path.
@@ -42,6 +44,7 @@ public interface ConfigurationAdapter
      * @return the retrieved boolean
      */
     public boolean getBoolean(String path, boolean def);
+    default boolean getBoolean(String path, java.util.function.Supplier<Boolean> def) { return getBoolean(path, def.get()); } // MikroCord - Add get* with Supplier defaults
 
     /**
      * Get a list from the specified path.
@@ -51,6 +54,7 @@ public interface ConfigurationAdapter
      * @return the retrieved list
      */
     public Collection<?> getList(String path, Collection<?> def);
+    default <T, C extends Collection<T>> C getList(String path, java.util.function.Supplier<C> def) { return (C) getList(path, def.get()); } // MikroCord - Add get* with Supplier defaults
 
     /**
      * Get the configuration all servers which may be accessible via the proxy.
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
index 44011a9655331056c0e29ee98612f446700a52c8..e62951d74c2fdda98b17986ff58fc8d392ff7c2c 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
@@ -326,4 +326,46 @@ public class YamlConfig implements ConfigurationAdapter
         Collection<String> permissions = get( "permissions." + group, null );
         return ( permissions == null ) ? Collections.EMPTY_SET : permissions;
     }
+    // MikroCord start - Add get* with Supplier defaults
+    @SuppressWarnings("unchecked")
+    private <T> T getWithSupplier(String path, java.util.function.Supplier<T> defSupplier, Map submap)
+    {
+        int index = path.indexOf( '.' );
+        if ( index == -1 )
+        {
+            Object val = submap.get( path );
+            T def;
+            if ( val == null && (def = defSupplier.get()) != null )
+            {
+                val = def;
+                submap.put( path, def );
+                save();
+            }
+            return (T) val;
+        } else
+        {
+            String first = path.substring( 0, index );
+            String second = path.substring( index + 1 );
+            Map sub = (Map) submap.get( first );
+            if ( sub == null )
+            {
+                sub = new LinkedHashMap();
+                submap.put( first, sub );
+            }
+            return getWithSupplier( second, defSupplier, sub );
+        }
+    }
+
+    @Override
+    public int getInt(String path, java.util.function.Supplier<Integer> def) { return getWithSupplier(path, def, config); }
+
+    @Override
+    public String getString(String path, java.util.function.Supplier<String> def) { return getWithSupplier(path, def, config); }
+
+    @Override
+    public boolean getBoolean(String path, java.util.function.Supplier<Boolean> def) { return getWithSupplier(path, def, config); }
+
+    @Override
+    public <T, C extends Collection<T>> C getList(String path, java.util.function.Supplier<C> def) { return getWithSupplier(path, def, config); }
+    // MikroCord end
 }
