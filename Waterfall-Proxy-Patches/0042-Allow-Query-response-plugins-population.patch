From 0d561785fbe425a8f68e9e812c3ab824d1e6fa45 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Sat, 20 Jul 2019 16:49:01 +0300
Subject: [PATCH] Allow Query response plugins population


diff --git a/api/src/main/java/io/github/waterfallmc/waterfall/QueryResult.java b/api/src/main/java/io/github/waterfallmc/waterfall/QueryResult.java
index 9a262c8a..eecdcfeb 100644
--- a/api/src/main/java/io/github/waterfallmc/waterfall/QueryResult.java
+++ b/api/src/main/java/io/github/waterfallmc/waterfall/QueryResult.java
@@ -56,4 +56,15 @@ public class QueryResult {
      */
     @NonNull
     private String version;
+    // MikroCord start - allow Query response plugins population
+    private final List<PluginInfo> plugins = new java.util.LinkedList<>();
+    @Data
+    public static final class PluginInfo {
+        @NonNull
+        private final String name;
+
+        @NonNull
+        private final String version;
+    }
+    // MikroCord end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index fb2e1b50..35b72a4b 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -277,4 +277,7 @@ public interface ProxyConfig
     // MikroCord start - save memory on scoreboard teams
     boolean isInternScoreboardTeamStrings();
     // MikroCord end
+    // MikroCord start - allow Query response plugins populationg
+    boolean isPopulateGS4QueryPlugins();
+    // MikroCord end
 }
diff --git a/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java b/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java
index 8b37cc45..e6a7d92b 100644
--- a/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java
+++ b/proxy/src/main/java/eu/mikroskeem/mikrocord/conf/MikroCordConfiguration.java
@@ -50,6 +50,9 @@ public class MikroCordConfiguration extends WaterfallConfiguration {
     @Getter
     private boolean internScoreboardTeamStrings = false;
 
+    @Getter
+    private boolean populateGS4QueryPlugins = false;
+
     @Override
     public void load() {
         super.load();
@@ -66,6 +69,7 @@ public class MikroCordConfiguration extends WaterfallConfiguration {
         tcpFastOpenMode = setupTfo(config.getInt("networking.tcp_fast_open.mode", tcpFastOpenMode));
         allowTablistRewrite = config.getBoolean("performance.allow_tablist_rewrite", allowTablistRewrite);
         internScoreboardTeamStrings = config.getBoolean("performance.intern_scoreboard_team_strings", internScoreboardTeamStrings);
+        populateGS4QueryPlugins = config.getBoolean("query.populate_plugins", populateGS4QueryPlugins);
     }
 
     private int setupTfo(int value) {
diff --git a/query/src/main/java/net/md_5/bungee/query/QueryHandler.java b/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
index 84e7a48f..a66eb97d 100644
--- a/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
+++ b/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
@@ -33,6 +33,7 @@ public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
     private final Random random = new Random();
     private final Cache<InetAddress, QuerySession> sessions = CacheBuilder.newBuilder().expireAfterWrite( 30, TimeUnit.SECONDS ).build();
     private final Cache<InetAddress, Integer> blacklistedAddresses = CacheBuilder.newBuilder().maximumSize(1024).expireAfterWrite( 120, TimeUnit.SECONDS ).build(); // MikroCord - Blacklist invalid query packet spammers
+    private volatile List<QueryResult.PluginInfo> cachedPluginInfoList = null; // MikroCord - allow Query response plugins population
 
     private void writeShort(ByteBuf buf, int s)
     {
@@ -119,12 +120,28 @@ public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
                 throw new IllegalStateException( "No session!" );
             }
 
+            // MikroCord start - allow Query response plugins population
+            List<QueryResult.PluginInfo> plugins = this.cachedPluginInfoList;
+            if (plugins == null) {
+                synchronized (this) {
+                    if (this.cachedPluginInfoList == null) {
+                        this.cachedPluginInfoList = plugins = bungee.getConfig().isPopulateGS4QueryPlugins() ? bungee.getPluginManager().getPlugins()
+                                .stream()
+                                .map(p -> p.getDescription()) // No it cannot be converted, it's going to be uglier here.
+                                .map(p -> new QueryResult.PluginInfo(p.getName(), p.getVersion()))
+                                .collect(Collectors.toList())
+                                : java.util.Collections.emptyList();
+                    }
+                }
+            }
+            // MikroCord end
             // Waterfall start
             List<String> players = bungee.getPlayers().stream().map(ProxiedPlayer::getName).collect(Collectors.toList());
 
             ProxyQueryEvent event = new ProxyQueryEvent(listener, new QueryResult(listener.getMotd(), "SMP", "Waterfall_Proxy",
                     bungee.getOnlineCount(), listener.getMaxPlayers(), listener.getHost().getPort(),
                     listener.getHost().getHostString(), "MINECRAFT",  players, bungee.getGameVersion()));
+            event.getResult().getPlugins().addAll(plugins); // MikroCord - allow Query response plugins population
             QueryResult result = bungee.getPluginManager().callEvent(event).getResult();
             // Waterfall end
 
-- 
2.22.0

