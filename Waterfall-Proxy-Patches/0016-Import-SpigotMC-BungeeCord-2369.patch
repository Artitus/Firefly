From eb724c3b12621f8015854ba7d346c21fdb4114c5 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Sun, 14 Apr 2019 17:31:20 +0300
Subject: [PATCH] Import SpigotMC/BungeeCord#2369

Ignore Login packet if client is closing

If a client switches server before the 250ms connection close, Bungee would have moved the user to another server anyway. This commit allows the close to be cleanly executed.

Execute code during connected method not construction instantion

Ensures code execution should be taking place as the connection would be
established.

Adapt PR to current codebase

Don't process packets in PingHandler if connection closed

Prevent setting cancelServer to current server

Add noarg disconnect method in ServerConnection

Prevents unnecessary garbage collection as previously calling without args would have used the varargs method handle which would cause compiler to create unnecessary empty array each time

diff --git a/api/src/main/java/net/md_5/bungee/api/connection/Connection.java b/api/src/main/java/net/md_5/bungee/api/connection/Connection.java
index 5c196bd9..f8fd2bf8 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/Connection.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/Connection.java
@@ -59,6 +59,15 @@ public interface Connection extends eu.mikroskeem.mikrocord.api.network.ChannelH
      */
     boolean isConnected();
 
+    // MikroCord start - Import SpigotMC/BungeeCord#2369
+    /**
+     * Checks if the user is about to be disconnected by client
+     *
+     * @return true if disconnecting or disconnected
+     */
+    boolean isDisconnecting();
+    // MikroCord end
+
     /**
      * Get the unsafe methods of this class.
      *
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
index 789a8ec1..3b93a973 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
@@ -54,7 +54,7 @@ public class ServerConnection implements Server, eu.mikroskeem.mikrocord.api.net
     {
         Preconditions.checkArgument( reason.length == 0, "Server cannot have disconnect reason" );
 
-        ch.delayedClose( null );
+        /*ch.delayedClose( null );*/disconnect(); // MikroCord - Import SpigotMC/BungeeCord#2369
     }
 
     @Override
@@ -63,6 +63,13 @@ public class ServerConnection implements Server, eu.mikroskeem.mikrocord.api.net
         disconnect();
     }
 
+    // MikroCord start - Import SpigotMC/BungeeCord#2369
+    public void disconnect()
+    {
+        ch.delayedClose( null );
+    }
+    // MikroCord end
+
     @Override
     public InetSocketAddress getAddress()
     {
@@ -75,6 +82,14 @@ public class ServerConnection implements Server, eu.mikroskeem.mikrocord.api.net
         return !ch.isClosed();
     }
 
+    // MikroCord start - Import SpigotMC/BungeeCord#2369
+    @Override
+    public boolean isDisconnecting()
+    {
+        return ch.isClosing();
+    }
+    // MikroCord end
+
     @Override
     public Unsafe unsafe()
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index 75132843..c762b4e1 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -199,6 +199,12 @@ public class ServerConnector extends PacketHandler implements eu.mikroskeem.mikr
     public void handle(Login login) throws Exception
     {
         Preconditions.checkState( thisState == State.LOGIN, "Not expecting LOGIN" );
+        // MikroCord start - Import SpigotMC/BungeeCord#2369
+        if ( user.isDisconnecting() )
+        {
+            throw CancelSendSignal.INSTANCE;
+        }
+        // MikroCord end
 
         ServerConnection server = new ServerConnection( ch, target );
         ServerConnectedEvent event = new ServerConnectedEvent( user, server );
@@ -314,6 +320,7 @@ public class ServerConnector extends PacketHandler implements eu.mikroskeem.mikr
             user.getServer().disconnect( "Quitting" );
         }
 
+        /* // MikroCord start - Import SpigotMC/BungeeCord#2369
         // TODO: Fix this?
         if ( !user.isActive() )
         {
@@ -322,13 +329,16 @@ public class ServerConnector extends PacketHandler implements eu.mikroskeem.mikr
             bungee.getLogger().warning( "No client connected for pending server!" );
             return;
         }
+        */ // MikroCOrd end
 
+        /* // MikroCord start - Import SpigotMC/BungeeCord#2369
         // Add to new server
         // TODO: Move this to the connected() method of DownstreamBridge
         target.addPlayer( user );
         user.getPendingConnects().remove( target );
         user.setServerJoinQueue( null );
         user.setDimensionChange( false );
+        */ // MikroCord end
 
         user.setServer( server );
         ch.getHandle().pipeline().get( HandlerBoss.class ).setHandler( new DownstreamBridge( bungee, user, server ) );
@@ -357,7 +367,7 @@ public class ServerConnector extends PacketHandler implements eu.mikroskeem.mikr
             event.setCancelled( true );
         }
         bungee.getPluginManager().callEvent( event );
-        if ( event.isCancelled() && event.getCancelServer() != null )
+        if ( event.isCancelled() && event.getCancelServer() != null && !event.getCancelServer().equals( target ) ) // MikroCord - Import SpigotMC/BungeeCord#2369
         {
             obsolete = true;
             user.connect( event.getCancelServer(), ServerConnectEvent.Reason.KICK_REDIRECT );
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 5230ac46..33bc1e45 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -733,6 +733,14 @@ public final class UserConnection implements ProxiedPlayer, eu.mikroskeem.mikroc
         return !ch.isClosed();
     }
 
+    // MikroCord start - Import SpigotMC/BungeeCord#2369
+    @Override
+    public boolean isDisconnecting()
+    {
+        return !ch.isClosing();
+    }
+    // MikroCord end
+
     @Override
     public Scoreboard getScoreboard()
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index 7698b871..71ff46fd 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -98,6 +98,17 @@ public class DownstreamBridge extends PacketHandler
         // Waterfall end
     }
 
+    // MikroCord start - Import SpigotMC/BungeeCord#2369
+    @Override
+    public void connected(ChannelWrapper channel) throws Exception
+    {
+        server.getInfo().addPlayer( con );
+        con.getPendingConnects().remove( server.getInfo() );
+        con.setServerJoinQueue( null );
+        con.setDimensionChange( false );
+    }
+    // MikroCord end
+
     @Override
     public void disconnected(ChannelWrapper channel) throws Exception
     {
@@ -509,7 +520,7 @@ public class DownstreamBridge extends PacketHandler
             def = null;
         }
         ServerKickEvent event = bungee.getPluginManager().callEvent( new ServerKickEvent( con, server.getInfo(), ComponentSerializer.parse( kick.getMessage() ), def, ServerKickEvent.State.CONNECTED, ServerKickEvent.Cause.SERVER ) ); // Waterfall
-        if ( event.isCancelled() && event.getCancelServer() != null )
+        if ( event.isCancelled() && event.getCancelServer() != null && !event.getCancelServer().equals( server.getInfo() ) ) // MikroCord - Import SpigotMC/BungeeCord#2369
         {
             con.connectNow( event.getCancelServer(), ServerConnectEvent.Reason.KICK_REDIRECT );
         } else
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 09d51703..dc8ca831 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -640,6 +640,13 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         return !ch.isClosed();
     }
+    // MikroCord start - Import SpigotMC/BungeeCord#2369
+    @Override
+    public boolean isDisconnecting()
+    {
+        return !ch.isClosing();
+    }
+    // MikroCord end
     // MikroCord start - make packet manipulation easier
     @Override
     public io.netty.channel.Channel getChannel() {
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
index 6bc14d67..5af80923 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
@@ -60,6 +60,14 @@ public class PingHandler extends PacketHandler
         }
     }
 
+    // MikroCord start - Import SpigotMC/BungeeCord#2369
+    @Override
+    public boolean shouldHandle(PacketWrapper packet) throws Exception
+    {
+        return !channel.isClosed();
+    }
+    // MikroCord end
+
     @Override
     @SuppressFBWarnings("UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
     public void handle(StatusResponse statusResponse) throws Exception
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index 51d0c6cf..28965ffe 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -45,9 +45,11 @@ public class UpstreamBridge extends PacketHandler
         this.bungee = bungee;
         this.con = con;
 
+        /* // MikroCord start - Import SpigotMC/BungeeCord#2369
         BungeeCord.getInstance().addConnection( con );
         con.getTabListHandler().onConnect();
         con.unsafe().sendPacket( BungeeCord.getInstance().registerChannels( con.getPendingConnection().getVersion() ) );
+        */ // MikroCord end
     }
 
     @Override
@@ -56,6 +58,16 @@ public class UpstreamBridge extends PacketHandler
         con.disconnect( Util.exception( t ) );
     }
 
+    // MikroCord start - Import SpigotMC/BungeeCord#2369
+    @Override
+    public void connected(ChannelWrapper channel) throws Exception
+    {
+        BungeeCord.getInstance().addConnection( con );
+        con.getTabListHandler().onConnect();
+        con.unsafe().sendPacket( BungeeCord.getInstance().registerChannels( con.getPendingConnection().getVersion() ) ); // MikroCord - Adapt PR to current codebase
+    }
+    // MikroCord end
+
     @Override
     public void disconnected(ChannelWrapper channel) throws Exception
     {
-- 
2.21.0

