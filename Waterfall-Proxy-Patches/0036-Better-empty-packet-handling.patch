From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Wed, 25 Sep 2019 11:29:45 +0300
Subject: [PATCH] Better empty packet handling


diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
index c0d371426a16565e735015b1f679278e0360ed1c..d95121ca7436eba60d7cce16f497637eda355677 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
@@ -7,8 +7,10 @@ import io.netty.handler.codec.ByteToMessageDecoder;
 import io.netty.handler.codec.CorruptedFrameException;
 import java.util.List;
 
+@lombok.RequiredArgsConstructor // Firefly - Better empty packet handling
 public class Varint21FrameDecoder extends ByteToMessageDecoder
 {
+    private final boolean server; // Firefly - Better empty packet handling
 
     private static boolean DIRECT_WARNING;
 
@@ -42,6 +44,12 @@ public class Varint21FrameDecoder extends ByteToMessageDecoder
                 in.resetReaderIndex();
                 int length = DefinedPacket.readVarInt( in );
                 // Waterfall end
+                // Firefly start - Better empty packet handling
+                if (length == 0 && !server) {
+                    ctx.channel().close();
+                    return;
+                }
+                // Firefly end
                 if ( false && length == 0) // Waterfall - ignore
                 {
                     throw new CorruptedFrameException( "Empty Packet!" );
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
index 7b002089ef9dd9f365dc0f7db076976b8dc6260c..1dfc177b02f03d91a3659a109e07f3761271b609 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
@@ -185,7 +185,16 @@ public class BungeeServerInfo implements ServerInfo
         new Bootstrap()
                 .channel( PipelineUtils.getChannel( socketAddress ) )
                 .group( BungeeCord.getInstance().workerEventLoopGroup )
-                .handler( PipelineUtils.BASE )
+                // Firefly start - Better empty packet handling
+                //.handler( PipelineUtils.BASE )
+                .handler(new io.netty.channel.ChannelInitializer<io.netty.channel.Channel>() {
+                    @Override
+                    protected void initChannel(io.netty.channel.Channel ch) throws Exception {
+                        net.md_5.bungee.netty.PipelineUtils.BASE.initChannel(ch);
+                        ch.pipeline().addAfter(net.md_5.bungee.netty.PipelineUtils.TIMEOUT_HANDLER, net.md_5.bungee.netty.PipelineUtils.FRAME_DECODER, new net.md_5.bungee.protocol.Varint21FrameDecoder(false));
+                    }
+                })
+                // Firefly end
                 .option( ChannelOption.CONNECT_TIMEOUT_MILLIS, BungeeCord.getInstance().getConfig().getRemotePingTimeout() )
                 .remoteAddress( socketAddress )
                 .connect()
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 615ab8a6be5d78cd1dfd0a958a9a13ad74629b1d..e42e8f9037f3209a5b94f2af5ccd5e41b19e89bf 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -345,6 +345,7 @@ public final class UserConnection implements ProxiedPlayer, eu.mikroskeem.firefl
             protected void initChannel(Channel ch) throws Exception
             {
                 PipelineUtils.BASE.initChannel( ch );
+                ch.pipeline().addAfter(PipelineUtils.TIMEOUT_HANDLER, PipelineUtils.FRAME_DECODER, new net.md_5.bungee.protocol.Varint21FrameDecoder(true)); // Firefly - Better empty packet handling
                 ch.pipeline().addAfter( PipelineUtils.FRAME_DECODER, PipelineUtils.PACKET_DECODER, new MinecraftDecoder( Protocol.HANDSHAKE, false, getPendingConnection().getVersion() ) );
                 ch.pipeline().addAfter( PipelineUtils.FRAME_PREPENDER, PipelineUtils.PACKET_ENCODER, new MinecraftEncoder( Protocol.HANDSHAKE, false, getPendingConnection().getVersion() ) );
                 ch.pipeline().get( HandlerBoss.class ).setHandler( new ServerConnector( bungee, UserConnection.this, target ) );
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 4dd4d57def155bd23679d171462e98650b086752..add26b2133302561d39e3fdd0baeb2e3a86bacee 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -93,6 +93,7 @@ public class PipelineUtils
                 ch.config().setOption(io.netty.channel.epoll.EpollChannelOption.TCP_FASTOPEN, BungeeCord.getInstance().getConfig().getTcpFastOpenMode().value);
             }
             // Firefly end
+            ch.pipeline().addAfter(TIMEOUT_HANDLER, FRAME_DECODER, new Varint21FrameDecoder(false)); // Firefly - Better empty packet handling
             ch.pipeline().addBefore( FRAME_DECODER, LEGACY_DECODER, new LegacyDecoder() );
             ch.pipeline().addAfter( FRAME_DECODER, PACKET_DECODER, new MinecraftDecoder( Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion() ) );
             ch.pipeline().addAfter( FRAME_PREPENDER, PACKET_ENCODER, new MinecraftEncoder( Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion() ) );
@@ -200,7 +201,7 @@ public class PipelineUtils
             ch.config().setWriteBufferWaterMark( MARK );
 
             ch.pipeline().addLast( TIMEOUT_HANDLER, new ReadTimeoutHandler( BungeeCord.getInstance().config.getTimeout(), TimeUnit.MILLISECONDS ) );
-            ch.pipeline().addLast( FRAME_DECODER, new Varint21FrameDecoder() );
+            //ch.pipeline().addLast( FRAME_DECODER, new Varint21FrameDecoder() ); // Firefly - Better empty packet handling
             ch.pipeline().addLast( FRAME_PREPENDER, framePrepender );
 
             ch.pipeline().addLast( BOSS_HANDLER, new HandlerBoss() );
