From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Sun, 9 Jun 2019 01:40:14 +0300
Subject: [PATCH] Download dependencies on runtime


diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
index 141de9e68abc7b5d60a25c3819c4a4cf4985f623..1cc02426eab0cc230389c3e8e00555651ac13479 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
@@ -17,7 +17,7 @@ public class PluginClassloader extends URLClassLoader implements eu.mikroskeem.m
 
     public PluginClassloader(URL[] urls)
     {
-        super( urls );
+        super( urls, PluginClassloader.class.getClassLoader() ); // MikroCord - download dependencies on runtime
         allLoaders.add( this );
     }
 
diff --git a/proxy/pom.xml b/proxy/pom.xml
index 18fd7a2e5633cb87f1942a31c088b7f1c933e16c..40b3fa6ae75751f1f1578f902f1eb5d8d6ca4b2c 100644
--- a/proxy/pom.xml
+++ b/proxy/pom.xml
@@ -152,7 +152,7 @@
                 <configuration>
                     <archive>
                         <manifestEntries>
-                            <Main-Class>net.md_5.bungee.BungeeCordLauncher</Main-Class>
+                            <Main-Class>eu.mikroskeem.mikrocord.Bootstrap</Main-Class> <!-- MikroCord - download dependencies on runtime -->
                             <Implementation-Version>${describe}</Implementation-Version>
                             <Specification-Version>${maven.build.timestamp}</Specification-Version>
 
@@ -175,6 +175,26 @@
                     </execution>
                 </executions>
                 <configuration>
+                    <!-- MikroCord start - download dependencies on runtime -->
+                    <artifactSet>
+                        <excludes>
+                            <exclude>com.google.guava:guava</exclude>
+                            <exclude>mysql:mysql-connector-java</exclude>
+                            <exclude>net.sf.trove4j:core</exclude>
+                            <exclude>org.yaml:snakeyaml</exclude>
+                            <exclude>com.google.code.gson:gson</exclude>
+                            <exclude>io.netty:*</exclude>
+                            <exclude>com.flowpowered:flow-nbt</exclude>
+                            <exclude>org.slf4j:slf4j-api</exclude>
+                            <exclude>org.apache.logging.log4j:log4j-iostreams</exclude>
+                            <exclude>org.apache.logging.log4j:log4j-jul</exclude>
+                            <exclude>org.apache.logging.log4j:log4j-slf4j-impl</exclude>
+                            <exclude>net.kyori:*</exclude>
+                            <exclude>org.checkerframework:checker-qual</exclude>
+                            <exclude>org.ow2.asm:asm</exclude>
+                        </excludes>
+                    </artifactSet>
+                    <!-- MikroCord end -->
                     <filters>
                         <filter>
                             <artifact>*:*</artifact>
diff --git a/proxy/src/main/java/eu/mikroskeem/mikrocord/Bootstrap.java b/proxy/src/main/java/eu/mikroskeem/mikrocord/Bootstrap.java
new file mode 100644
index 0000000000000000000000000000000000000000..9cbaf91a5b415e9a29c150e3e8e8552cd24e0849
--- /dev/null
+++ b/proxy/src/main/java/eu/mikroskeem/mikrocord/Bootstrap.java
@@ -0,0 +1,28 @@
+package eu.mikroskeem.mikrocord;
+
+import eu.mikroskeem.mikrocord.dependencies.DependencyClassLoader;
+
+import java.io.IOException;
+import java.nio.file.Paths;
+
+/**
+ * @author Mark Vainomaa
+ */
+public final class Bootstrap {
+    private static DependencyClassLoader classLoader;
+
+    public static void main(String... args) throws Exception {
+        try {
+            classLoader = DependencyClassLoader.initialize(Bootstrap.class.getClassLoader(), Paths.get("lib"));
+            classLoader.setupDependencies();
+        } catch (IOException e) {
+            System.err.println("Failed to download dependencies!");
+            e.printStackTrace(System.err);
+            System.exit(1);
+            return;
+        }
+
+        Class<?> bootstrap = classLoader.loadClass("net.md_5.bungee.BungeeCordLauncher");
+        bootstrap.getMethod("main", String[].class).invoke(null, (Object) args);
+    }
+}
diff --git a/proxy/src/main/java/eu/mikroskeem/mikrocord/dependencies/DependencyClassLoader.java b/proxy/src/main/java/eu/mikroskeem/mikrocord/dependencies/DependencyClassLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..1ca623706a5044b90ef11b007ccb7aadb44d46d9
--- /dev/null
+++ b/proxy/src/main/java/eu/mikroskeem/mikrocord/dependencies/DependencyClassLoader.java
@@ -0,0 +1,220 @@
+package eu.mikroskeem.mikrocord.dependencies;
+
+import io.github.waterfallmc.waterfall.utils.Hex;
+import lombok.SneakyThrows;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.nio.channels.Channels;
+import java.nio.channels.FileChannel;
+import java.nio.channels.ReadableByteChannel;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.security.MessageDigest;
+import java.util.Arrays;
+import java.util.List;
+
+/**
+ * @author Mark Vainomaa
+ */
+public final class DependencyClassLoader extends URLClassLoader {
+    static {
+        ClassLoader.registerAsParallelCapable();
+        try {
+            digest = MessageDigest.getInstance("SHA-1");
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    private static final MessageDigest digest;
+    private static final Logger logger = LogManager.getLogger(DependencyClassLoader.class);
+    private static final List<String> DEFAULT_REPOSITORIES = Arrays.asList(
+            // TODO: mirror repositories?
+            "https://repo.maven.apache.org/maven2"
+    );
+
+    private static final String NETTY_VERSION = "4.1.34.Final";
+
+    private static final List<Dependency> DEPENDENCIES = Arrays.asList(
+            new Dependency("com.google.guava", "guava", "20.0", "89507701249388e1ed5ddcf8c41f4ce1be7831ef"),
+            new Dependency("mysql", "mysql-connector-java", "5.1.47", "9de4159aaf2d08817a276610b8114a825fca6cfd"),
+            new Dependency("net.sf.trove4j", "core", "3.1.0", "5fd0207b685536b29dd65c86f4b3bf89befb885c"),
+            new Dependency("org.yaml", "snakeyaml", "1.23", "ec62d74fe50689c28c0ff5b35d3aebcaa8b5be68"),
+            new Dependency("com.google.code.gson", "gson", "2.8.0", "c4ba5371a29ac9b2ad6129b1d39ea38750043eff"),
+            new Dependency("com.flowpowered", "flow-nbt", "1.0.0", "cdb46ca1a493dfc635e53a5055ed6c7872c32941"),
+            new Dependency("io.netty", "netty-buffer", NETTY_VERSION, "8afc2027eadc7848127553ebb490ea0e2b199d4e"),
+            new Dependency("io.netty", "netty-codec", NETTY_VERSION, "0cb53baf46cc55768f2e28d15cde399063555ea8"),
+            new Dependency("io.netty", "netty-codec-dns", NETTY_VERSION, "40352df88786faf68901fa01b0c51baafcad5115"),
+            new Dependency("io.netty", "netty-codec-haproxy", NETTY_VERSION, "d8f64c174e7875e3be6a75f91b0ee3ba3316655e"),
+            new Dependency("io.netty", "netty-codec-http", NETTY_VERSION, "02887d87fbc1b057657348f61dc538f7296daf79"),
+            new Dependency("io.netty", "netty-common", NETTY_VERSION, "2dffa21967d36cae446b6905bd5fb39750fcba43"),
+            new Dependency("io.netty", "netty-handler", NETTY_VERSION, "96169098bebda3d1432f5421c338958063b3da52"),
+            new Dependency("io.netty", "netty-resolver", NETTY_VERSION, "528789e98eef519960a56e44569ecb2260782fd7"),
+            new Dependency("io.netty", "netty-resolver-dns", NETTY_VERSION, "0ca536138bcc44997354cdd102933656f65f56c7"),
+            new Dependency("io.netty", "netty-transport-native-epoll", NETTY_VERSION, "linux-x86_64", "4ee3e61c2429f280a63729d39b3973562318600b"),
+            new Dependency("io.netty", "netty-transport-native-unix-common", NETTY_VERSION, "7e63ead8935a85d601646d44263a40fabe225771"),
+            new Dependency("io.netty", "netty-transport", NETTY_VERSION, "f57be6509efa6766d90e537a775930101f26b35c"),
+            new Dependency("org.apache.logging.log4j", "log4j-iostreams", "2.11.1", "54219892aca8fe8b91d5c0e4e74d78b5ea613b1d"),
+            new Dependency("org.apache.logging.log4j", "log4j-jul", "2.11.1", "f94ff1933609c93844d48815eecbe9e7e4d26473"),
+            new Dependency("org.apache.logging.log4j", "log4j-slf4j-impl", "2.11.1", "4b41b53a3a2d299ce381a69d165381ca19f62912"),
+            new Dependency("org.slf4j", "slf4j-api", "1.7.25", "da76ca59f6a57ee3102f8f9bd9cee742973efa8a"),
+            new Dependency("net.kyori", "text-api", "3.0.1", "664de5e3f01adad302adb0bd1d7933203463caba"),
+            new Dependency("net.kyori", "text-serializer-gson", "3.0.1", "e3c395e7ed613b48f6d4963c5127307b3e3666bb"),
+            new Dependency("net.kyori", "text-serializer-legacy", "3.0.1", "6fdbf35ca215180bd65a9a8805374a4c35b86cff"),
+            new Dependency("org.ow2.asm", "asm", "7.1", "fa29aa438674ff19d5e1386d2c3527a0267f291e")
+    );
+
+    private final ClassLoader actualParent;
+    private final Path libraryPath;
+
+    private DependencyClassLoader(URL[] urls, ClassLoader parent, ClassLoader actualParent, Path libraryPath) {
+        super(urls, parent);
+        this.actualParent = actualParent;
+        this.libraryPath = libraryPath;
+    }
+
+    public void setupDependencies() throws IOException {
+        for (Dependency dependency : DEPENDENCIES) {
+            Path targetPath = libraryPath.resolve(dependency.formatPath());
+            if (Files.exists(targetPath)) {
+                // Verify checksum to disallow tampering
+                byte[] bytes = Files.readAllBytes(targetPath);
+                String sha1Sum = Hex.encodeString(digest.digest(bytes));
+
+                // Do not download if checksum is correct
+                if (sha1Sum.equals(dependency.getChecksum())) {
+                    addFile(targetPath);
+                    continue;
+                }
+
+                logger.warn("Dependency {} checksum is not valid ({} != {}), redownloading", dependency, dependency.getChecksum(), sha1Sum);
+                Files.delete(targetPath);
+            }
+
+            Files.createDirectories(targetPath.getParent());
+            logger.info("Downloading dependency {}", dependency);
+
+            for (String repository: dependency.getRepositories()) {
+                HttpURLConnection connection = (HttpURLConnection) dependency.formatUrl(repository).openConnection();
+                connection.setInstanceFollowRedirects(true);
+
+                // Download the file
+                try (ReadableByteChannel stream = Channels.newChannel(connection.getInputStream()); FileChannel file = new FileOutputStream(targetPath.toFile()).getChannel()) {
+                    file.transferFrom(stream, 0, Long.MAX_VALUE);
+                } catch (FileNotFoundException e) {
+                    logger.debug("Dependency {} was not found in repository {}, trying another repository...", dependency, repository);
+                    Files.deleteIfExists(targetPath);
+                    continue;
+                } catch (IOException e) {
+                    logger.debug("Could not connect to repository {} to download {}, trying another repository...", repository, dependency);
+                    continue;
+                }
+
+                // Check file checksum
+                byte[] bytes = Files.readAllBytes(targetPath);
+                String sha1Sum = Hex.encodeString(digest.digest(bytes));
+
+                // Verify
+                if (!sha1Sum.equals(dependency.getChecksum()) && !dependency.getChecksum().isEmpty()) {
+                    logger.error("Downloading dependency {} failed because checksums don't match ({} != {});", dependency, dependency.getChecksum(), sha1Sum);
+                    throw new RuntimeException("Failed to download dependency " + dependency);
+                }
+
+                if (dependency.getChecksum().isEmpty()) {
+                    logger.info("new Dependency(\"{}\", \"{}\", \"{}\", \"{}\")", dependency.groupId, dependency.artifactId, dependency.version, sha1Sum);
+                }
+
+                if (Files.notExists(targetPath))
+                    throw new RuntimeException("Failed to download dependency " +  dependency);
+
+                // Load
+                logger.info("Dependency {} downloaded", dependency);
+                addFile(targetPath);
+            }
+        }
+    }
+
+    @SneakyThrows
+    void addFile(Path path) {
+        addURL(path.toUri().toURL());
+    }
+
+    public static DependencyClassLoader initialize(ClassLoader parent, Path libraryPath) {
+        URL[] urls;
+        if (parent instanceof URLClassLoader) {
+            urls = ((URLClassLoader) parent).getURLs();
+        } else {
+            // Try to get MikroCord jar URL from CodeSource
+            urls = new URL[] { DependencyClassLoader.class.getProtectionDomain().getCodeSource().getLocation() };
+        }
+        DependencyClassLoader cl = new DependencyClassLoader(urls, ClassLoader.getSystemClassLoader().getParent(), parent, libraryPath);
+        Thread.currentThread().setContextClassLoader(cl);
+        return cl;
+    }
+
+    private final static class Dependency {
+        private final String groupId;
+        private final String artifactId;
+        private final String version;
+        private final String classifier;
+        private final String checksum;
+        private final List<String> repositories;
+
+        Dependency(String groupId, String artifactId, String version, String classifier, String checksum, List<String> repositories) {
+            this.groupId = groupId;
+            this.artifactId = artifactId;
+            this.version = version;
+            this.classifier = classifier;
+            this.checksum = checksum;
+            this.repositories = repositories;
+        }
+
+        Dependency(String groupId, String artifactId, String version, String checksum) {
+            this(groupId, artifactId, version, null, checksum, DEFAULT_REPOSITORIES);
+        }
+
+        Dependency(String groupId, String artifactId, String version, String classifier, String checksum) {
+            this(groupId, artifactId, version, classifier, checksum, DEFAULT_REPOSITORIES);
+        }
+
+        List<String> getRepositories() {
+            return repositories;
+        }
+
+        String getChecksum() {
+            return checksum;
+        }
+
+        @SneakyThrows
+        URL formatUrl(String mirrorUrl) {
+            return new URL(String.format("%s/%s", mirrorUrl, formatPath()));
+        }
+
+        String formatPath() {
+            return String.format(
+                    (this.classifier != null ? "%s/%s/%s/%s-%s-" + this.classifier + ".jar" : "%s/%s/%s/%s-%s.jar"),
+                    this.groupId.replace('.', '/'),
+                    this.artifactId.replace('.', '/'),
+                    this.version,
+                    this.artifactId,
+                    this.version
+            );
+        }
+
+        @Override
+        public String toString() {
+            return "Dependency{" +
+                    "groupId='" + groupId + '\'' +
+                    ", artifactId='" + artifactId + '\'' +
+                    ", version='" + version + '\'' +
+                    '}';
+        }
+    }
+}
