From 960eb7ce95a89569684e7b6df90478ea4de45d1c Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Sat, 13 Apr 2019 22:08:57 +0300
Subject: [PATCH] Use ASM to invoke event handlers


diff --git a/event/pom.xml b/event/pom.xml
index 26865667..4c9488e5 100644
--- a/event/pom.xml
+++ b/event/pom.xml
@@ -17,4 +17,13 @@
 
     <name>mikrocord-Event</name>
     <description>Generic java event dispatching API intended for use with MikroCord.</description>
+    <!-- MikroCord start - Add ASM -->
+    <dependencies>
+        <dependency>
+            <groupId>org.ow2.asm</groupId>
+            <artifactId>asm</artifactId>
+            <version>7.1</version>
+        </dependency>
+    </dependencies>
+    <!-- MikroCord end -->
 </project>
diff --git a/event/src/main/java/eu/mikroskeem/mikrocord/event/ASMEventExecutor.java b/event/src/main/java/eu/mikroskeem/mikrocord/event/ASMEventExecutor.java
new file mode 100644
index 00000000..0386c1f0
--- /dev/null
+++ b/event/src/main/java/eu/mikroskeem/mikrocord/event/ASMEventExecutor.java
@@ -0,0 +1,106 @@
+package eu.mikroskeem.mikrocord.event;
+
+import org.objectweb.asm.ClassWriter;
+import org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.Opcodes;
+import org.objectweb.asm.Type;
+
+import java.lang.reflect.Method;
+import java.util.WeakHashMap;
+import java.util.concurrent.atomic.AtomicInteger;
+
+/**
+ * @author Mark Vainomaa
+ */
+class ASMEventExecutor {
+    private final static AtomicInteger CLASS_NAME_COUNTER = new AtomicInteger(0);
+    private final static Method defineClassMethod;
+
+    private final static WeakHashMap<Method, EventExecutor> generatedExecutors = new WeakHashMap<>();
+
+    static EventExecutor getEventExecutor(Method handlerMethod) {
+        return generatedExecutors.computeIfAbsent(handlerMethod, (__) -> {
+            try {
+                // Generate and load newly created event executor
+                ClassLoader classLoader = handlerMethod.getDeclaringClass().getClassLoader();
+                String className = generateNewClassName();
+                byte[] generatedExc = generateEventExecutor(className, handlerMethod);
+                Class<? extends EventExecutor> eventExcClass = defineClass(classLoader, className, generatedExc).asSubclass(EventExecutor.class);
+
+                // Instantiate generated executor
+                return eventExcClass.getConstructor().newInstance();
+            } catch (Exception e) {
+                throw new RuntimeException("Failed to generate an event executor", e);
+            }
+        });
+    }
+
+    /**
+     * @return New ASM event executor class name
+     */
+    static String generateNewClassName() {
+        return ASMEventExecutor.class.getPackage().getName() + ".generated.GeneratedASMEventExecutor" + CLASS_NAME_COUNTER.getAndIncrement();
+    }
+
+    static byte[] generateEventExecutor(String className, Method handlerMethod) {
+        String rawName = className.replace('.', '/');
+
+        Class<?> listenerClass = handlerMethod.getDeclaringClass();
+        Class<?> eventClass = handlerMethod.getParameterTypes()[0];
+
+        String objectName = Type.getInternalName(Object.class);
+        String objectDesc = "L" + objectName + ";";
+        String eeName = Type.getInternalName(EventExecutor.class);
+        String eeDesc = "(" + objectDesc + objectDesc + ")V";
+
+        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
+        cw.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC, rawName, null, objectName, new String[]{ eeName });
+
+        // Generate no-args public constructor
+        {
+            MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null);
+            mv.visitVarInsn(Opcodes.ALOAD, 0);
+            mv.visitMethodInsn(Opcodes.INVOKESPECIAL, objectName, "<init>", "()V", false);
+            mv.visitInsn(Opcodes.RETURN);
+            mv.visitMaxs(0, 0);
+            mv.visitEnd();
+        }
+
+        // Generate event executor method
+        {
+            MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC, "execute", eeDesc, null, null);
+            mv.visitVarInsn(Opcodes.ALOAD, 1);
+            mv.visitTypeInsn(Opcodes.CHECKCAST, Type.getInternalName(listenerClass));
+            mv.visitVarInsn(Opcodes.ALOAD, 2);
+            mv.visitTypeInsn(Opcodes.CHECKCAST, Type.getInternalName(eventClass));
+            int inv = listenerClass.isInterface() ? Opcodes.INVOKEINTERFACE : Opcodes.INVOKEVIRTUAL;
+            mv.visitMethodInsn(inv, Type.getInternalName(listenerClass), handlerMethod.getName(), Type.getMethodDescriptor(handlerMethod), listenerClass.isInterface());
+            if(handlerMethod.getReturnType() != void.class) {
+                mv.visitInsn(Opcodes.POP);
+            }
+            mv.visitInsn(Opcodes.RETURN);
+            mv.visitMaxs(0, 0);
+            mv.visitEnd();
+        }
+
+        cw.visitEnd();
+        return cw.toByteArray();
+    }
+
+    private static Class<?> defineClass(ClassLoader loader, String name, byte[] data) {
+        try {
+            return (Class<?>) defineClassMethod.invoke(loader, name, data, 0, data.length);
+        } catch (Exception e) {
+            throw new RuntimeException("Failed to define class '" + name + "'", e);
+        }
+    }
+
+    static {
+        try {
+            defineClassMethod = ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class);
+            defineClassMethod.setAccessible(true);
+        } catch (Exception e) {
+            throw new Error("Failed to get ClassLoader#defineClass method", e);
+        }
+    }
+}
\ No newline at end of file
diff --git a/event/src/main/java/eu/mikroskeem/mikrocord/event/EventExecutor.java b/event/src/main/java/eu/mikroskeem/mikrocord/event/EventExecutor.java
new file mode 100644
index 00000000..ad7bcbf6
--- /dev/null
+++ b/event/src/main/java/eu/mikroskeem/mikrocord/event/EventExecutor.java
@@ -0,0 +1,20 @@
+package eu.mikroskeem.mikrocord.event;
+
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+
+/**
+ * @author Mark Vainomaa
+ */
+public interface EventExecutor {
+    void execute(Object listener, Object event);
+
+    static EventExecutor create(Method method) {
+        if(Modifier.isPublic(method.getModifiers())) {
+            return ASMEventExecutor.getEventExecutor(method);
+        } else {
+            method.setAccessible(true);
+            return new MethodHandleEventExecutor(method);
+        }
+    }
+}
diff --git a/event/src/main/java/eu/mikroskeem/mikrocord/event/MethodHandleEventExecutor.java b/event/src/main/java/eu/mikroskeem/mikrocord/event/MethodHandleEventExecutor.java
new file mode 100644
index 00000000..696f33c0
--- /dev/null
+++ b/event/src/main/java/eu/mikroskeem/mikrocord/event/MethodHandleEventExecutor.java
@@ -0,0 +1,37 @@
+package eu.mikroskeem.mikrocord.event;
+
+import lombok.SneakyThrows;
+
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+
+/**
+ * @author Mark Vainomaa
+ */
+class MethodHandleEventExecutor implements EventExecutor {
+    private final Class<?> eventClass;
+    private final MethodHandle handle;
+    private final boolean isStatic;
+
+    @SneakyThrows
+    MethodHandleEventExecutor(Method method) {
+        this.eventClass = method.getParameterTypes()[0];
+        this.handle = MethodHandles.lookup().unreflect(method);
+        this.isStatic = Modifier.isStatic(method.getModifiers());
+    }
+
+    @Override
+    @SneakyThrows
+    public void execute(Object listener, Object event) {
+        if(!eventClass.isInstance(event))
+            return; // Uhh?
+
+        if(isStatic) {
+            this.handle.invoke(event);
+        } else {
+            this.handle.invoke(listener, event);
+        }
+    }
+}
diff --git a/event/src/main/java/net/md_5/bungee/event/EventBus.java b/event/src/main/java/net/md_5/bungee/event/EventBus.java
index 5b5d4201..f05d1dd7 100644
--- a/event/src/main/java/net/md_5/bungee/event/EventBus.java
+++ b/event/src/main/java/net/md_5/bungee/event/EventBus.java
@@ -115,8 +115,12 @@ public class EventBus
                         currentPriorityMap = new HashMap<>();
                         prioritiesMap.put( entry.getKey(), currentPriorityMap );
                     }
+                    // MikroCord start - 0 is faster
+                    /*
                     Method[] baked = new Method[ entry.getValue().size() ];
-                    currentPriorityMap.put( listener, entry.getValue().toArray( baked ) );
+                    */
+                    currentPriorityMap.put( listener, entry.getValue().toArray( new Method[0] ) );
+                    // MikroCord end
                 }
                 bakeHandlers( e.getKey() );
             }
@@ -186,13 +190,13 @@ public class EventBus
                     {
                         for ( Method method : listenerHandlers.getValue() )
                         {
-                            EventHandlerMethod ehm = new EventHandlerMethod( listenerHandlers.getKey(), method );
+                            EventHandlerMethod ehm = new EventHandlerMethod( listenerHandlers.getKey(), method, eu.mikroskeem.mikrocord.event.EventExecutor.create(method) ); // MikroCord - Use ASM to invoke event handlers
                             handlersList.add( ehm );
                         }
                     }
                 }
             } while ( value++ < Byte.MAX_VALUE );
-            byEventBaked.put( eventClass, handlersList.toArray( new EventHandlerMethod[ handlersList.size() ] ) );
+            byEventBaked.put( eventClass, handlersList.toArray( new EventHandlerMethod[ 0 ] ) ); // MikroCord - 0 is faster
         } else
         {
             byEventBaked.remove( eventClass );
diff --git a/event/src/main/java/net/md_5/bungee/event/EventHandlerMethod.java b/event/src/main/java/net/md_5/bungee/event/EventHandlerMethod.java
index ad19c020..3d98102d 100644
--- a/event/src/main/java/net/md_5/bungee/event/EventHandlerMethod.java
+++ b/event/src/main/java/net/md_5/bungee/event/EventHandlerMethod.java
@@ -13,9 +13,10 @@ public class EventHandlerMethod
     private final Object listener;
     @Getter
     private final Method method;
+    private final eu.mikroskeem.mikrocord.event.EventExecutor executor; // MikroCord - Use ASM to invoke event handlers
 
     public void invoke(Object event) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException
     {
-        method.invoke( listener, event );
+        executor.execute( listener, event ); // MikroCord - Use ASM to invoke event handlers
     }
 }
-- 
2.21.0

