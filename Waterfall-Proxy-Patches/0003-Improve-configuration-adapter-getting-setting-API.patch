From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Vainomaa <mikroskeem@mikroskeem.eu>
Date: Tue, 19 Mar 2019 22:11:14 +0200
Subject: [PATCH] Improve configuration adapter getting/setting API


diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
index a401133595c203de499483ced0d2dda09ab147c8..521fbfa00656e12470e3be514186a31b8e4f63be 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
@@ -137,6 +137,7 @@ public abstract class ProxyServer
      *
      * @return the used configuration adapter
      */
+    @Deprecated // Firefly
     public abstract ConfigurationAdapter getConfigurationAdapter();
 
     /**
@@ -145,8 +146,28 @@ public abstract class ProxyServer
      *
      * @param adapter the adapter to use
      */
+    @Deprecated // Firefly
     public abstract void setConfigurationAdapter(ConfigurationAdapter adapter);
 
+    // Firefly start - Configuration adapters
+    /**
+     * Returns the currently in use configuration adapter by {@link ConfigurationType}.
+     *
+     * @param configurationType The configuration type
+     * @return the used configuration adapter
+     */
+    public abstract ConfigurationAdapter getConfigurationAdapter(ConfigurationType configurationType);
+
+    /**
+     * Set the configuration adapter to be used with given {@link ConfigurationType}. Must be called from
+     * {@link Plugin#onLoad()}.
+     *
+     * @param adapter the adapter to use
+     * @param configurationType The configuration type
+     */
+    public abstract void setConfigurationAdapter(ConfigurationType configurationType, ConfigurationAdapter adapter);
+    // Firefly end
+
     /**
      * Get the currently in use reconnect handler.
      *
@@ -327,4 +348,18 @@ public abstract class ProxyServer
      */
     public abstract Title createTitle();
 
+    // Firefly start - Configuration adapters
+    public enum ConfigurationType {
+        /**
+         * Generic BungeeCord configuration
+         */
+        BUNGEECORD,
+
+        /**
+         * Waterfall-specific configuration
+         */
+        WATERFALL,
+        ;
+    }
+    // Firefly end
 }
diff --git a/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java b/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java
index e860214f8d7bedcc98d5f4cc0c2108ea153b80be..83d44abb87fe522e7b8b7a1560968af2883ef974 100644
--- a/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java
+++ b/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java
@@ -47,8 +47,13 @@ public class WaterfallConfiguration extends Configuration {
     @Override
     public void load() {
         super.load();
+        /* // Firefly start - Improve configuration adapter getting/setting API
         YamlConfig config = new YamlConfig(new File("waterfall.yml"));
         config.load(false); // Load, but no permissions
+        */
+        var config = net.md_5.bungee.api.ProxyServer.getInstance().getConfigurationAdapter(net.md_5.bungee.api.ProxyServer.ConfigurationType.WATERFALL);
+        config.load();
+        // Firefly end
         logInitialHandlerConnections = config.getBoolean( "log_initial_handler_connections", logInitialHandlerConnections );
         gameVersion = config.getString("game_version", "").isEmpty() ? Joiner.on(", ").join(ProtocolConstants.SUPPORTED_VERSIONS) : config.getString("game_version", "");
         useNettyDnsResolver = config.getBoolean("use_netty_dns_resolver", useNettyDnsResolver);
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 2e958ad474638c6efc02c8cc13b7e97f98e56393..c36ca2c72b02f8ebe874fc9282e0a355ee9063d2 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -167,6 +167,37 @@ public class BungeeCord extends ProxyServer
     private ConnectionThrottle connectionThrottle;
     //private final ModuleManager moduleManager = new ModuleManager(); // Firefly - drop modules support
 
+    // Firefly start - Configuration adapters
+    private ConfigurationAdapter waterfallConfigurationAdapter = new YamlConfig(new File("waterfall.yml")) {
+        @Override
+        public void load() {
+            super.load(false);
+        }
+    };
+
+    @Override
+    public ConfigurationAdapter getConfigurationAdapter(ConfigurationType configurationType) {
+        switch (configurationType) {
+            case BUNGEECORD:
+                return configurationAdapter;
+            case WATERFALL:
+                return waterfallConfigurationAdapter;
+        }
+        return null;
+    }
+
+    @Override
+    public void setConfigurationAdapter(ConfigurationType configurationType, ConfigurationAdapter adapter) {
+        switch (configurationType) {
+            case BUNGEECORD:
+                configurationAdapter = adapter;
+                break;
+            case WATERFALL:
+                waterfallConfigurationAdapter = adapter;
+                break;
+        }
+    }
+    // Firefly end
     {
         // TODO: Proper fallback when we interface the manager
         registerChannel( "BungeeCord" );
